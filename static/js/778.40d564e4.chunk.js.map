{"version":3,"file":"static/js/778.40d564e4.chunk.js","mappings":"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","sources":["TukTukBot/Pages/Dashboard.jsx","TukTukBot/Pages/Settings.jsx","TukTukBot/Pages/Tasks/AddTask.jsx","TukTukBot/Pages/Tasks/ListTask.jsx","TukTukBot/Pages/Topics/CreateTopic.jsx","TukTukBot/Server2.ts","TukTukBot/TukTukBot.jsx","TukTukBot/components/Articles.jsx","TukTukBot/components/Category.jsx"],"sourcesContent":["import CategoryList from \"../components/Category\";\n\nconst AddTask = () => {\n    const categories = [\n        {\n            name : 'Category 1'\n        },\n        {\n            name : 'Category 2'\n        }\n    ];\n    return <CategoryList categories={categories} onRemove={console.log} />\n}\nexport default AddTask","import SelectInput from \"@mui/material/Select/SelectInput\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport PowerSettingsNewIcon from '@mui/icons-material/PowerSettingsNew';\nimport DeleteIcon from '@mui/icons-material/Delete';\nconst Settings = () => {\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            <TextField\n                id=\"outlined-basic\"\n                label=\"Outlined\"\n                variant=\"outlined\"\n            />\n            <br/>\n            <Button variant=\"contained\" color=\"error\">\n                <DeleteIcon /> &nbsp; Delete Personal Account\n                </Button>\n        </Paper>\n    )\n}\nexport default Settings","import CategoryList from \"../../components/Category\";\nimport ListIcon from '@mui/icons-material/List';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport Server from \"../../Server2.ts\";\n\nfunction AddTask() {\n    const categoryListRef = React.useRef([]);\n    const [countries, setCountries] = useState([]);\n    const [taskID, setTaskID] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [topicName, setTopicName] = useState('folklore');\n    const [country, setCountry] = useState('BD');\n    const [targetwiki, setTargetwiki] = useState('');\n    const [categoryExpanded, setCategoryExpanded] = useState(true);\n    const [categoryFetching, setCategoryFetching] = useState(false);\n    const [targetWikiError, setTargetWikiError] = useState(false);\n    const [defaultCategories, setDefaultCategories] = useState([]);\n    const statusRef = React.useRef(false);\n    const wiki = []\n    for (const [key, value] of Object.entries(Server.languages)) {\n        wiki.push({ id: key, label: value })\n    }\n    wiki.sort((a, b) => a.label.localeCompare(b.label));\n    useEffect(() => {\n        Server.fetchCountries(topicName).then(countries => {\n            setCountries([...countries]);\n        })\n    }, [topicName])\n    useEffect(() => {\n        if (!country)\n            return;\n        if (!topicName)\n            return;\n        setDisabled(true);\n        setCategoryFetching(true);\n        Server.getCategories({ country: country, topic: topicName })\n            .then(categories => {\n                setDisabled(false);\n                setDefaultCategories(categories)\n            }).finally(e => {\n                // console.log(e)\n                setDisabled(false);\n                setCategoryFetching(false);\n            })\n    }, [country, topicName]);\n    const submitTask = useCallback(() => {\n        // submit task logic\n        const categoryList = categoryListRef?.current;\n        if (!categoryList?.length)\n            return;\n        if(!targetwiki){\n            setTargetWikiError(true);\n            return;\n        } else {\n            setTargetWikiError(false);\n        }\n        if ( !country || !categoryList || !topicName)\n            return;\n        setDisabled(true);\n        Server.submitTask({\n            target_wiki: targetwiki,\n            country: country,\n            categories: categoryList,\n            topic_id: topicName,\n            task_data: categoryList\n        }).then(response => {\n            const taskID = response?.id;\n            setTaskID(taskID);\n            // console.log(response)\n            setDisabled(false);\n            setCategoryExpanded(false);\n        })\n    }, [targetwiki]);\n    return (\n        <Card>\n            <CardHeader title=\"Add Task\" action={\n                <Button variant=\"contained\" color=\"success\" onClick={submitTask} disabled={disabled} size=\"small\">\n                    <ListIcon /> Generate\n                </Button>\n            } />\n            <CardContent>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'left',\n                    flexDirection: 'row',\n                    // borderSpacing: 1\n                }}>\n                    <FormControl sx={{ width: 300 }} size=\"small\">\n                        <InputLabel>Country</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            value={country}\n                            label=\"Country\"\n                            onChange={e => e.target.value && setCountry(e.target.value)}\n                        >\n                            {countries.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ width: 300, ml: 0.5 }} size=\"small\">\n                        <InputLabel>Target Wiki</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            error={targetWikiError}\n                            value={targetwiki}\n                            label=\"Target Wiki\"\n                            onChange={e => e.target.value && setTargetwiki(e.target.value)}\n                        >\n                            {wiki.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant=\"contained\"\n                        disabled={disabled}\n                        // color=\"secondary\"\n                        onClick={e => setCategoryExpanded(!categoryExpanded)}\n                        size=\"small\"\n                        sx={{\n                            padding : 1\n                        }}\n                        >\n                        {categoryExpanded ? <CollapseIcon /> : <ExpandedIcon />}\n                    </Button>\n                </Box>\n\n                <Collapse in={categoryExpanded}>\n                    {categoryFetching ? <CircularProgress /> : (\n                        <CategoryList\n                            disabled={disabled}\n                            categoryListRef={categoryListRef}\n                            Server={Server}\n                            initialCategories={defaultCategories}\n                        />\n                    )}\n                </Collapse>\n                {taskID && <ArticleList\n                    Server={Server}\n                    taskID={taskID}\n                    statusRef={statusRef}\n                    setDisabled={setDisabled}\n                />}\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default AddTask","\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CardActions, CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nimport GREEN from \"@mui/material/colors/green\";\nimport RED from \"@mui/material/colors/red\";\nimport Yellow from \"@mui/material/colors/yellow\";\nimport Server from \"../../Server2.ts\"\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@mui/icons-material/Add';\nconst countryMAP = await Server.getCountryMap()\nconst User = () => {\n    const [username, setUsername] = useState(null);\n    const [id, setID] = useState(0)\n    const [taskCount, setTaskCount] = useState(0)\n    const [articleCount, setArticleCount] = useState(0)\n    const [fetching, setFetching] = useState(false)\n    useEffect(() => {\n        setFetching(true)\n        Server.getMe().then(user => {\n            setUsername(user.username)\n            setTaskCount(user.task_count)\n            setID(user.id)\n            setArticleCount(user.article_count)\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return fetching ? <CircularProgress /> : (\n        <Box>\n            <h2>Welcome, {username}</h2>\n            <h3>Task Count : {taskCount}</h3>\n            <h3>Total Article Count : {articleCount}</h3>\n        </Box>\n    )\n}\n\nconst DownloadButon = ({ id }) => {\n    const download = async () => {\n        const csv = await Server.exportResult(id, 'csv')\n        const a = document.createElement('a')\n        a.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }))\n        a.download = 'result.csv'\n        a.click()\n    }\n    return <Button variant=\"contained\" color=\"primary\" onClick={download}>\n        <DownloadIcon />\n    </Button>\n}\nconst headers = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1 },\n    { field: 'status', headerName: 'Status',maxWidth: 100, flex : 1 },\n    { field: 'topic_id', headerName: 'Topic',  flex : 1 },\n    { field: 'country', headerName: 'Country',  flex : 1 },\n    { field: 'category_count', headerName: 'Category', maxWidth: 100, flex : 1 },\n    {field : 'article_count', headerName : 'Article', maxWidth : 100, flex : 1},\n    // { field: 'created_at', headerName: 'Timestamp', flex : 1},\n    { field: 'download', headerName: 'Download', renderCell : (params) => params.value},\n]\nconst TaskList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const formatter = new Intl.DateTimeFormat('en-US', {\n        dateStyle: 'medium',\n        timeStyle: 'medium'\n    });\n    useEffect(() => {\n        setFetching(true)\n        Server.getTasks().then(tasks => {\n            setTasks(tasks.map(v => ({\n                ...v,\n                country : countryMAP[v.country] || v.country,\n                created_at : formatter.format(new Date(v.created_at)),\n                download : v.status == 'done' && <DownloadButon id={v.id} />\n            })))\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return <DataGrid\n        rows={tasks}\n        columns={headers}\n        pageSize={5}\n        sx={{\n            '& .MuiDataGrid-row' : {\n                cursor : 'pointer',\n                color : 'white',\n            },\n            '& .Mui-hovered' : {\n                color : 'black'\n            },\n            '& .Mui-selected' : {\n                color : 'black'\n            },\n            '& .task-done' : {\n                backgroundColor : GREEN[800],\n                color : 'white',\n            },\n            '& .task-done:hover' : {\n                backgroundColor : GREEN[600],\n                color : 'white',\n            },\n            '& .task-pending' : {\n                backgroundColor : Yellow[300],\n                color : 'black'\n            },\n            '& .task-failed' : {\n                backgroundColor : RED[300],\n            },\n        }}\n        rowsPerPageOptions={[5]}\n        checkboxSelection={false}\n        disableSelectionOnClick={true}\n        rowSelection={false}\n        getRowClassName={(params) => `task-${params.row.status} .task`}\n        loading={fetching}\n    />\n\n}\nconst ListTask = () => {\n    const NewTaskButton = () => (\n        <Link to=\"create\">\n           <Button variant=\"contained\" color=\"success\"><AddIcon /> New</Button>\n        </Link>\n    )\n    return (\n        <Card>\n            \n            <CardHeader action={<NewTaskButton />}/>\n            <CardContent>\n            <User />\n                <TaskList />\n            </CardContent>\n        </Card>\n    )\n}\nexport default ListTask","import CategoryList from \"../../components/Category\";\n\nconst AddTask = () => {\n    const categories = [\n        {\n            name : 'Category 1'\n        },\n        {\n            name : 'Category 2'\n        }\n    ];\n    return <CategoryList categories={categories} onRemove={console.log} />\n}\nexport default AddTask","\ntype Country = string\ntype ID = number\ntype Article = {\n    id : ID;\n    title : string;\n    wikidata : string;\n    target : string\n}\ntype Category = {\n    id : ID;\n    title : string;\n    subcat?: boolean\n}\n\ntype APIResponseSingle<T> = {\n    success : true;\n    data : T\n}\ntype APIResponseMultiple<T> = {\n    success : true;\n    data : T[]\n}\ntype User = {\n    id : number;\n    username : string;\n    rights : number;\n    created_at : string;\n    article_count : number;\n    category_count : number;\n    task_count : number;\n}\ntype TaskCreate = {\n    home_wiki : string;\n    target_wiki : string;\n    country : Country;\n    topic_id : string;\n    categories : Category[],\n    topic_data : Category[] \n}\ntype Task = {\n    id: number,\n    status: string,\n    homewiki: string,\n    categories: Array<string>,\n    user: string,\n    country: string,\n    article_count: number\n    category_count : number\n    category_done : number\n    last_category : string\n}\ntype TaskResultFormat = \"json\" | \"wikitext\" | \"csv\"\ntype TaskResult = string | Article[]\ntype CountryEntry = {\n    id : string;\n    label : string;\n    title : string;\n}\nconst LANGUAGE_KEY = \"tk-lang\"\nconst COUNTRY_KEY = \"tk-country\"\nclass TukTukBot {\n    static baseURL = new URL(window.location.origin);\n    static languages : Object | null = null;\n    static countries : Object | null= null;\n    static async init(){\n        if(!TukTukBot.languages || !TukTukBot.countries){\n            if(!localStorage.getItem(LANGUAGE_KEY) || !localStorage.getItem(COUNTRY_KEY)){\n                localStorage.setItem(COUNTRY_KEY, JSON.stringify(await fetch(\"/api/country\").then(res => res.json()).then(res => res.data)))\n                localStorage.setItem(LANGUAGE_KEY, JSON.stringify(await fetch(\"/api/language\").then(res => res.json()).then(res => res.data)))\n            }\n            TukTukBot.languages = JSON.parse(localStorage.getItem(LANGUAGE_KEY) || \"{}\");\n            TukTukBot.countries = JSON.parse(localStorage.getItem(COUNTRY_KEY) || \"{}\");\n        }\n        \n    }\n    static async addSubCategories(categories: Category[]) {\n        var subcats:Category[] = []\n        for (let cat of categories) {\n            console.info(\"Adding subcategories for\", cat.title)\n            const url = new URL(\"api/subcat/\" + cat.title, TukTukBot.baseURL);\n            const response = await fetch(url.toString());\n            const data: APIResponseMultiple<Category> = await response.json();\n            subcats = subcats.concat(data.data);\n            cat.subcat = false;\n        }\n        return subcats;\n    }\n    static async getCategories({country, topic} : {country : Country, topic : string}){\n        const url = new URL(`api/topic/${topic.split(\"/\")[0]}/${country}/categories`, TukTukBot.baseURL);\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<Category> = await response.json();\n        if (responseData.success) {\n            return responseData.data\n        } else {\n            console.log(\"Error\", responseData.data)\n            return [] as Category[];\n        }\n    }\n    static async submitTask(data : TaskCreate) {\n        // Submit the task\n        const url = new URL(\"api/task\", TukTukBot.baseURL);\n        const response = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify(data),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        });\n        const responseData: APIResponseSingle<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n\n    }\n    static async fetchCountries(topic : string){\n        const url = new URL(\"api/topic/\" + topic, TukTukBot.baseURL);\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<CountryEntry> = await response.json();\n        if (responseData.success) {\n            const rawData = responseData.data;\n            const countries = rawData.map((country) => {\n                return {\n                    id : country.id.split(\"/\")[1],\n                    label : country.title\n                }\n            })\n            return countries\n        } else {\n            console.log(\"Error\", responseData.data)\n            return [] as Country[];\n        }\n    }\n    static async exportResult(taskID : Number, format: TaskResultFormat = \"json\") {\n        const url = new URL(`api/task/${taskID}/export/` + format, TukTukBot.baseURL);\n        const response = await fetch(url.toString());\n        const data : APIResponseSingle<TaskResult> = await response.json();\n        return data.data;\n    }\n    static async getTask(taskID: number) {\n        const url = new URL(\"api/task/\" + taskID, TukTukBot.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseSingle<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getTasks() {\n        const url = new URL(\"api/task\", TukTukBot.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getMe(){\n        const url = new URL(\"api/user/me\", TukTukBot.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseSingle<User> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getCountryMap(){\n        const url = new URL(\"api/country\", TukTukBot.baseURL);\n        const countries = await fetch(url).then(res => res.json())\n        return countries.data\n    }\n    static searchCategory(callback : (data : Category[]) => void, setSearching : (searching : boolean) => void){\n        let q = \"\";\n        let queued = false;\n        const interval = 1000;\n        async function _search() {\n            \n            if(q == \"\") return callback([]);\n            const url = new URL(\"https://en.wikipedia.org/w/api.php\");\n            const params = new URLSearchParams({\n                \"action\": \"query\",\n                \"format\": \"json\",\n                \"list\": \"prefixsearch\",\n                \"formatversion\": \"2\",\n                \"pssearch\": q,\n                \"pslimit\": \"10\",\n                \"psnamespace\": \"14\",\n                \"origin\": \"*\"\n            })\n            url.search = params.toString();\n            const response = await fetch(url.toString());\n            const data = await response.json();\n            const categories = data.query.prefixsearch.map((cat : any) => {\n                return {\n                    id : cat.pageid,\n                    title : cat.title\n                }\n            })\n            queued = false;\n            setSearching(false);\n            return callback(categories);\n        }\n        return function(e : KeyboardEvent){\n            setSearching(true)\n            q = (e?.target as HTMLInputElement)?.value;\n            if(queued == false){\n                // Nothing is queued\n                queued = true;\n                setTimeout(_search, interval)\n            } else {\n                // Something is already queued\n                console.log(\"Already queued\")\n            }\n        }\n\n    }\n}\nexport default TukTukBot;\n","import { Routes, Route } from \"react-router-dom\"\nimport React from \"react\"\nimport AddTask from \"./Pages/Tasks/AddTask.jsx\";\nimport ListTask from \"./Pages/Tasks/ListTask.jsx\"\nimport Setting from \"./Pages/Settings.jsx\";\nimport DashBoard from \"./Pages/Dashboard.jsx\";\nimport AddTopic from \"./Pages/Topics/CreateTopic.jsx\";\nimport Server from \"./Server2.ts\"\nServer.init()\nconst TukTukBot = () => {\n\n    return (\n        <Routes>\n            <Route path='/topic/*'>\n                <Route path=\"create\" element={<AddTopic />} />\n                <Route path=\":id/edit\" element={<Setting />} />\n                <Route path=\":id\" element={<Setting />} />\n                <Route path=\"*\" element={<Setting />} />\n            </Route>\n            <Route path=\"task/*\" >\n                <Route path=\"create\" element={<AddTask />} />\n                <Route path=\":id\" element={<Setting />} />\n                <Route path=\"*\" element={<ListTask />} />\n            </Route>\n            <Route path=\"/setting\" element={<Setting />} />\n            <Route path=\"*\" element={<DashBoard />} />\n        </Routes>\n    )\n}\n\nexport default TukTukBot","import Paper from \"@mui/material/Paper\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React, { useCallback } from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CodeIcon from '@mui/icons-material/Code';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Collapse from \"@mui/material/Collapse\"\nimport Server from \"../Server2.ts\";\n\n\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nconst COLUMNS = [\n    { field: 'id', headerName: 'ID', maxWidth : 30, flex:1, hideable : false },\n    { field: 'title', headerName: 'Title' , flex: 1, hideable : false },\n    // { field: 'wikidata', headerName: 'Wikidata', width : 120},\n    { field: 'target', headerName: 'Target', flex : 1},\n\n]\nconst TabledArticles = ({ data }) => {\n    const rows = data?.map((article, index) => ({\n        id: index + 1,\n        title: article?.title,\n        wikidata : article?.wikidata,\n        target : article?.target\n    }));\n    return (\n        <DataGrid\n            rows={rows}\n            columns={COLUMNS}\n            pageSize={5}\n            rowsPerPageOptions={[5]}\n            checkboxSelection={false}\n            disableSelectionOnClick\n            sx={{\n                width: '100%',\n            }}\n        />\n    )\n}\n\nconst WikiTextArticles = ({ data }) => {\n    return (\n        <TextField\n            id=\"outlined-multiline-static\"\n            label={null}\n            multiline\n            rows={4}\n            value={data}\n            fullWidth\n            onClick={e => e.target.select()}\n        />\n    )\n}\nclass ArticleList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n\n            wikitext: '',\n            showWikiText: false,\n            fetchingWikiText: false,\n\n            csv: null,\n            fetchingCSV: false,\n\n            json: null,\n            fetchingJSON: false,\n\n            statusCheckerTimer: 0,\n\n            articleCount: 0,\n            processedCategory: 'Cat:L',\n            processedCount: 100\n        };\n    }\n    async checkTaskStatus() {\n        console.log(\"Checking status\")\n        const task = await Server.getTask(this.props.taskID)\n        console.log(\"Task Status\", task)\n        if (task.status != 'pending') {\n            console.log(\"Timer Cleared\", this.state.statusCheckerTimer)\n            this.setState({\n                generating: false,\n                statusCheckerTimer: 0\n            })\n            if (task.status == 'done') {\n                this.exportTable();\n            } else {\n\n            }\n        } else {\n            this.setState({\n                generating: true,\n                statusCheckerTimer: setTimeout(this.checkTaskStatus.bind(this), 1000)\n\n            })\n        }\n        this.setState({\n            articleCount: task.article_count,\n            processedCategory: task.last_category,\n            processedCount: task.category_count\n        })\n    }\n    componentWillUnmount() {\n        clearTimeout(this.state.statusCheckerTimer);\n        this.setState({\n            // statusCheckerTimer : 0\n        })\n\n    }\n    async exportCSV() {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!this.state.csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(this.props.taskID, 'csv');\n            this.setState({\n                csv: csv\n            })\n            return download(this.props.taskID, csv)\n        };\n        return download(this.props.taskID, this.state.csv)\n\n    }\n    async exportWikiTextToggle() {\n        if (this.state.showWikiText)\n            // hide the wikitext\n            this.setState({\n                showWikiText: false\n            })\n        else {\n            if (!this.state.wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(this.props.taskID, 'wikitext');\n                this.setState({\n                    showWikiText: true,\n                    wikitext: wikitext\n                })\n            }\n            else\n                this.setState({\n                    showWikiText: true\n                })\n        }\n    }\n    async exportTable() {\n        const cats = await Server.exportResult(this.props.taskID, 'json');\n        this.setState({\n            data: cats,\n            json: JSON.stringify(cats)\n        })\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log(\"Should Component Update\", nextProps, nextState)\n        if (this.props.taskID != nextProps.taskID) {\n            this.checkTaskStatus();\n            // reset the state\n            this.setState({\n                data: [],\n\n                wikitext: '',\n                showWikiText: false,\n                fetchingWikiText: false,\n\n                csv: null,\n                fetchingCSV: false,\n\n                json: null,\n                fetchingJSON: false,\n\n                statusCheckerTimer: 0,\n\n                articleCount: 0,\n                processedCategory: '',\n                processedCount: 0\n            })\n        }\n        return true;\n    }\n    render() {\n        const processing = this.state.fetchingCSV || this.state.fetchingJSON || this.state.fetchingWikiText;\n        const Actions = (\n            <Box sx={{\n                display: 'flex',\n                justifyContent: 'flex-end',\n                alignItems: 'center',\n                '& > *': {\n                    m: 1,\n                },\n            }}>\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={this.exportWikiTextToggle.bind(this)}>\n                    <CodeIcon /> WikiText\n                </Button>\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={this.exportCSV.bind(this)}>\n                    <DownloadIcon /> CSV\n                </Button>\n            </Box>\n        );\n        const GeneratorStatus = (\n            <Box>\n                Article count : {this.state.articleCount}\n                Processed Count : {this.state.processedCount}\n                Last Category: {this.state.processedCategory}\n            </Box>\n        )\n        return <Card sx={\n            { m: '5px' }\n        }>\n            <CardHeader action={Actions} title={GeneratorStatus} />\n            <CardContent>\n                {processing ? <CircularProgress /> : (\n                    <>\n                        <Collapse in={this.state.showWikiText}>\n                            <WikiTextArticles data={this.state.wikitext} />\n                        </Collapse>\n                        {this.state.data?.length > 0 && <TabledArticles data={this.state.data} />}\n                    </>\n                )}\n            </CardContent>\n        </Card>\n    }\n}\nconst _ArticleList = ({ taskID, statusRef, setDisabled }) => {\n    const [data, setData] = React.useState([]);\n    const [wikitext, setWikiText] = React.useState('');\n    const [showWikiText, setShowWikiText] = React.useState(false);\n    const [csv, setCSV] = React.useState(null);\n    const [json, setJSON] = React.useState(null);\n    const [statusCheckerTimer, setStatusCheckerTimer] = React.useState(0);\n    const [articleCount, setArticleCount] = React.useState(0);\n    const [processedCategory, setProcessedCategory] = React.useState('');\n    const [processedCount, setProcessedCount] = React.useState(0);\n    const [generating, setGenerating] = React.useState(false);\n    statusRef.current = generating\n    const checkTaskStatus = useCallback(async () => {\n        // console.log(\"Checking status\")\n        const task = await Server.getTask(taskID)\n        if (task.status != 'pending') {\n            // console.log(\"Timer Cleared\", statusCheckerTimer)\n            setGenerating(false);\n            setDisabled(false);\n            setStatusCheckerTimer(0)\n            if (task.status == 'done') {\n                exportTable();\n            } else if(task.status == 'failed'){\n                alert(\"Task Failed\")\n            }\n        } else {\n            setGenerating(true);\n            setDisabled(true);\n            setStatusCheckerTimer(setTimeout(checkTaskStatus, 1000))\n        }\n        setArticleCount(task.article_count);\n        setProcessedCategory(task.last_category);\n        setProcessedCount(task.category_count);\n    }, [taskID]);\n    const exportCSV = useCallback(async () => {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(taskID, 'csv');\n            setCSV(csv)\n            return download(taskID, csv)\n        };\n        return download(taskID, csv)\n\n    }, [taskID,]);\n    const exportWikiTextToggle = useCallback(async () => {\n        if (showWikiText)\n            // hide the wikitext\n            setShowWikiText(false)\n        else {\n            if (!wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(taskID, 'wikitext');\n                setShowWikiText(true)\n                setWikiText(wikitext)\n            }\n            else\n                setShowWikiText(true)\n        }\n    }, [taskID, showWikiText]);\n    const exportTable = useCallback(async () => {\n        const cats = await Server.exportResult(taskID, 'json');\n        setData(cats);\n        setJSON(JSON.stringify(cats));\n    }, [taskID]);\n    \n    React.useEffect(() => {\n        checkTaskStatus();\n        return () => {\n            clearTimeout(statusCheckerTimer);\n            setStatusCheckerTimer(0)\n        }\n    }, [taskID, checkTaskStatus]);\n    const Actions = (\n        <Box sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n            '& > *': {\n                m: 1,\n            },\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportWikiTextToggle} disabled={generating} size=\"small\">\n                <CodeIcon /> WikiText\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportCSV} disabled={generating} size=\"small\">\n                <DownloadIcon /> CSV\n            </Button>\n        </Box>\n    );\n    const GeneratorStatus = (\n        <Box sx={{\n            fontSize: '16px'\n        }}>\n            Article count : {articleCount}<br/>\n            Processed Count : {processedCount}<br/>\n            Last Category: {processedCategory}<br/>\n        </Box>\n    )\n    return <Card sx={\n        { m: '5px' }\n    }>\n        <CardHeader action={Actions} title={GeneratorStatus} />\n        <CardContent>\n            {generating ? <CircularProgress /> : (\n                <>\n                    <Collapse in={showWikiText}>\n                        <WikiTextArticles data={wikitext} />\n                    </Collapse>\n                    {data?.length > 0 && <TabledArticles data={data} />}\n                </>\n            )}\n        </CardContent>\n    </Card>\n}\nexport default _ArticleList","import Paper from \"@mui/material/Paper\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport Server from \"../Server2.ts\";\nconst Category = ({ category, onRemove, onSubCategory }) => {\n    return (\n        <ListItem>\n            <ListItemText sx={{\n                padding: '5px'\n            }} primary={category?.title} />\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onSubCategory(category?.title)}>\n                <WaterfallChartIcon />\n            </Button>\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onRemove(category?.title)}>\n                <DeleteIcon />\n            </Button>\n        </ListItem>\n    )\n}\nconst AddCategory = ({ onAdd, disabled }) => {\n    const [searching, setSearching] = React.useState(false);\n    const [categorySuggestions, setCategorySuggestions] = React.useState([]); // [{title: 'cat1'}, {title: 'cat2'}\n    const [newCat, setNewCat] = React.useState('');\n    const onInput = React.useCallback(Server.searchCategory(setCategorySuggestions, setSearching), []);\n\n    return (\n        <Box sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            // justifyContent: 'center',\n            width: '100%',\n            height: '100%',\n\n        }}>\n            <AutoComplete\n                // disablePortal\n                id=\"new-category\"\n                options={categorySuggestions}\n                disabled={disabled}\n                size=\"small\"\n\n                loading={searching}\n                getOptionLabel={(option) => option?.title || ''}\n                sx={{\n                    width: '100%',\n                    maxWidth: '400px',\n                    marginRight: '10px',\n                    marginLeft: '10px'\n                }}\n                renderInput={(params) => <TextField\n                    {...params} disabled={disabled}\n                    onInput={onInput}\n                    onSelect={e => setNewCat(e.target.value)}\n                    label=\"Add Category\"\n                />}\n            />\n            <Button disabled={disabled} variant=\"contained\" color=\"success\" onClick={e => onAdd(newCat) || setNewCat('')} >\n                <AddIcon />\n            </Button>\n        </Box>\n    )\n}\nconst CategoryList = ({ categoryListRef, initialCategories, disabled = false }) => {\n    const [categoryObject, setCategoryObject] = React.useState({});// {categoryName: {categoryObject}\n\n    const categories = React.useMemo(() => {\n        return Object.values(categoryObject);\n    }, [categoryObject]);\n\n    const [searching, setSearching] = React.useState(false);\n    const onRemove = React.useCallback((category) => {\n        if (!category)\n            return\n        if (!categoryObject[category])\n            return\n        delete categoryObject[category];\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onAdd = React.useCallback((catTitle) => {\n        if (!catTitle)\n            return\n        if (categoryObject[catTitle])\n            return\n        const cat = {\n            name: catTitle,\n            title: catTitle,\n            pageid: Math.round(Math.random() * 1e5),\n            subcat: false\n        };\n        categoryObject[catTitle] = cat;\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onSubCategory = React.useCallback((category) => {\n        const cat = categoryObject[category];\n        if (!cat)\n            return\n        Server.addSubCategories([cat]).then(categories => {\n            categories.forEach(cat => {\n                categoryObject[cat.title] = cat;\n            });\n            setCategoryObject({ ...categoryObject });\n        });\n    }, [categoryObject]);\n    // Populate the categories\n    React.useEffect(() => {\n        if (categoryListRef)\n            categoryListRef.current = categories;\n    }, [categories, categoryListRef]);\n    React.useEffect(() => {\n        if (!initialCategories?.length)\n            return;\n        setCategoryObject(initialCategories?.reduce((dict, v) => { dict[v.title] = v; return dict }, {}))\n    }, [initialCategories]);\n    return (\n        <Paper elevation={0}>\n            <List dense={true}>\n                {categories?.map((category, index) => (\n                    <React.Fragment key={\"cat\" + index}>\n                        <Category category={category} onRemove={onRemove} onSubCategory={onSubCategory} />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List><br />\n            {/* // show button and the input in the same box */}\n            <AddCategory onAdd={onAdd} disabled={disabled} />\n        </Paper>\n    )\n}\nexport default CategoryList"],"names":["_jsx","CategoryList","categories","name","onRemove","console","log","_jsxs","Paper","sx","height","width","m","border","outline","position","children","TextField","id","label","variant","Button","color","DeleteIcon","categoryListRef","React","_useState","useState","_useState2","_slicedToArray","countries","setCountries","_useState3","_useState4","taskID","setTaskID","_useState5","_useState6","disabled","setDisabled","_useState7","_useState8","topicName","_useState9","_useState10","country","setCountry","_useState11","_useState12","targetwiki","setTargetwiki","_useState13","_useState14","categoryExpanded","setCategoryExpanded","_useState15","_useState16","categoryFetching","setCategoryFetching","_useState17","_useState18","targetWikiError","setTargetWikiError","_useState19","_useState20","defaultCategories","setDefaultCategories","statusRef","wiki","_i","_Object$entries","Object","entries","Server","languages","length","_Object$entries$_i","key","value","push","sort","a","b","localeCompare","useEffect","fetchCountries","then","_toConsumableArray","getCategories","topic","finally","e","submitTask","useCallback","categoryList","current","target_wiki","topic_id","task_data","response","Card","CardHeader","title","action","onClick","size","ListIcon","CardContent","Box","display","justifyContent","flexDirection","FormControl","InputLabel","Select","fullWidth","onChange","target","map","v","MenuItem","ml","error","padding","CollapseIcon","ExpandedIcon","Collapse","in","CircularProgress","initialCategories","ArticleList","countryMAP","getCountryMap","User","username","setUsername","setID","taskCount","setTaskCount","articleCount","setArticleCount","fetching","setFetching","getMe","user","task_count","article_count","DownloadButon","_ref","download","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","csv","wrap","_context","prev","next","exportResult","sent","document","createElement","href","URL","createObjectURL","Blob","type","click","stop","apply","arguments","DownloadIcon","headers","field","headerName","maxWidth","flex","renderCell","params","TaskList","tasks","setTasks","formatter","Intl","DateTimeFormat","dateStyle","timeStyle","getTasks","_objectSpread","created_at","format","Date","status","DataGrid","rows","columns","pageSize","cursor","backgroundColor","GREEN","Yellow","RED","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","rowSelection","getRowClassName","concat","row","loading","NewTaskButton","Link","to","AddIcon","LANGUAGE_KEY","COUNTRY_KEY","TukTukBot","_classCallCheck","_createClass","_init","localStorage","getItem","t0","t1","t2","JSON","fetch","res","json","data","t3","t4","stringify","call","setItem","t5","t6","t7","t8","t9","parse","_addSubCategories","_callee2","subcats","_iterator","_step","cat","url","_data","_context2","_createForOfIteratorHelper","s","n","done","info","baseURL","toString","subcat","f","finish","abrupt","_x","_getCategories","_callee3","responseData","_context3","split","success","_x2","_submitTask","_callee4","_context4","method","body","_x3","_fetchCountries","_callee5","rawData","_context5","_x4","_exportResult","_callee6","_args6","_context6","undefined","_x5","_getTask","_callee7","_context7","_x6","_getTasks","_callee8","_context8","_getMe","_callee9","_context9","_getCountryMap","_callee10","_context10","callback","setSearching","q","queued","_search","_search2","_callee11","_context11","URLSearchParams","search","query","prefixsearch","pageid","_e$target","setTimeout","window","location","origin","init","Routes","Route","path","element","AddTopic","Setting","AddTask","ListTask","DashBoard","COLUMNS","hideable","TabledArticles","article","index","wikidata","WikiTextArticles","multiline","select","_ref3","_React$useState","_React$useState2","setData","_React$useState3","_React$useState4","wikitext","setWikiText","_React$useState5","_React$useState6","showWikiText","setShowWikiText","_React$useState7","_React$useState8","setCSV","_React$useState9","_React$useState10","setJSON","_React$useState11","_React$useState12","statusCheckerTimer","setStatusCheckerTimer","_React$useState13","_React$useState14","_React$useState15","_React$useState16","processedCategory","setProcessedCategory","_React$useState17","_React$useState18","processedCount","setProcessedCount","_React$useState19","_React$useState20","generating","setGenerating","checkTaskStatus","task","getTask","exportTable","alert","last_category","category_count","exportCSV","_csv","remove","exportWikiTextToggle","_wikitext","cats","clearTimeout","Actions","alignItems","CodeIcon","GeneratorStatus","fontSize","_Fragment","Category","category","onSubCategory","ListItem","ListItemText","primary","WaterfallChartIcon","AddCategory","onAdd","searching","categorySuggestions","setCategorySuggestions","newCat","setNewCat","onInput","searchCategory","AutoComplete","options","getOptionLabel","option","marginRight","marginLeft","renderInput","onSelect","_ref3$disabled","categoryObject","setCategoryObject","values","catTitle","Math","round","random","addSubCategories","forEach","reduce","dict","elevation","List","dense","Divider"],"sourceRoot":""}