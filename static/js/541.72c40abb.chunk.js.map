{"version":3,"file":"static/js/541.72c40abb.chunk.js","mappings":"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","sources":["FnF/Pages/Tasks/AddTask.jsx","FnF/Pages/Tasks/ListTask.jsx","FnF/Pages/Settings.jsx","FnF/Dashboard.jsx","FnF/FnF.jsx","FnF/components/Articles.jsx","FnF/components/Category.jsx"],"sourcesContent":["import CategoryList from \"../../components/Category\";\nimport ListIcon from '@mui/icons-material/List';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport Server from \"../../Server\";\nimport Footer from \"../../../Layout/Footer\";\n\nfunction AddTask() {\n    const categoryListRef = React.useRef([]);\n    const [countries, setCountries] = useState([]);\n    const [taskID, setTaskID] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [topicName, setTopicName] = useState('folklore');\n    const [country, setCountry] = useState('BD');\n    const [targetwiki, setTargetwiki] = useState('');\n    const [categoryExpanded, setCategoryExpanded] = useState(true);\n    const [categoryFetching, setCategoryFetching] = useState(false);\n    const [targetWikiError, setTargetWikiError] = useState(false);\n    const [defaultCategories, setDefaultCategories] = useState([]);\n    const [resultElement, setResultElement] = useState(null);\n    const statusRef = React.useRef(false);\n    const wiki = []\n    for (const [key, value] of Object.entries(Server.languages)) {\n        wiki.push({ id: key, label: value })\n    }\n    wiki.sort((a, b) => a.label.localeCompare(b.label));\n    useEffect(() => {\n        Server.fetchCountries(topicName).then(countries => {\n            setCountries([...countries]);\n        })\n    }, [topicName])\n    useEffect(() => {\n        if (!country)\n            return;\n        if (!topicName)\n            return;\n        setDisabled(true);\n        setCategoryFetching(true);\n        Server.getCategories({ country: country, topic: topicName })\n            .then(categories => {\n                setDisabled(false);\n                setDefaultCategories(categories)\n            }).finally(e => {\n                // console.log(e)\n                setDisabled(false);\n                setCategoryFetching(false);\n            })\n    }, [country, topicName]);\n    const submitTask = useCallback(() => {\n        // submit task logic\n        const categoryList = categoryListRef?.current;\n        if (!categoryList?.length)\n            return;\n        if(!targetwiki){\n            setTargetWikiError(true);\n            return;\n        } else {\n            setTargetWikiError(false);\n        }\n        if ( !country || !categoryList || !topicName)\n            return;\n        setDisabled(true);\n        setResultElement(null);\n        Server.submitTask({\n            target_wiki: targetwiki,\n            country: country,\n            categories: categoryList,\n            topic_id: topicName,\n            task_data: categoryList\n        }).then(response => {\n            const taskID = response?.id;\n            setTaskID(taskID);\n            // console.log(response)\n            setDisabled(false);\n            setCategoryExpanded(false);\n            setResultElement(<ArticleList\n                Server={Server}\n                taskID={taskID}\n                statusRef={statusRef}\n                setDisabled={setDisabled}\n                targetLanguage={targetwiki}\n            />)\n        })\n    }, [targetwiki]);\n    return (\n        <Card>\n            <CardHeader title=\"Add Task\" action={\n                <Button variant=\"contained\" color=\"success\" onClick={submitTask} disabled={disabled} size=\"small\">\n                    <ListIcon /> Generate\n                </Button>\n            } />\n            <CardContent>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'left',\n                    flexDirection: 'row',\n                    // borderSpacing: 1\n                }}>\n                    <FormControl sx={{ width: 300 }} size=\"small\">\n                        <InputLabel>Country</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            value={country}\n                            label=\"Country\"\n                            onChange={e => e.target.value && setCountry(e.target.value)}\n                        >\n                            {countries.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ width: 300, ml: 0.5 }} size=\"small\">\n                        <InputLabel>Target Wiki</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            error={targetWikiError}\n                            value={targetwiki}\n                            label=\"Target Wiki\"\n                            onChange={e => e.target.value && setTargetwiki(e.target.value)}\n                        >\n                            {wiki.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant=\"contained\"\n                        disabled={disabled}\n                        // color=\"secondary\"\n                        onClick={e => setCategoryExpanded(!categoryExpanded)}\n                        size=\"small\"\n                        sx={{\n                            padding : 1\n                        }}\n                        >\n                        {categoryExpanded ? <CollapseIcon /> : <ExpandedIcon />}\n                    </Button>\n                </Box>\n\n                <Collapse in={categoryExpanded}>\n                    {categoryFetching ? <CircularProgress /> : (\n                        <CategoryList\n                            disabled={disabled}\n                            categoryListRef={categoryListRef}\n                            Server={Server}\n                            initialCategories={defaultCategories}\n\n                        />\n                    )}\n                </Collapse>\n                {resultElement}\n\n            <Footer />\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default AddTask","\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CardActions, CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nimport GREEN from \"@mui/material/colors/green\";\nimport RED from \"@mui/material/colors/red\";\nimport Yellow from \"@mui/material/colors/yellow\";\nimport Server from \"../../Server\"\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@mui/icons-material/Add';\nimport Footer from '../../../Layout/Footer';\nconst User = () => {\n    const [username, setUsername] = useState(null);\n    const [id, setID] = useState(0)\n    const [taskCount, setTaskCount] = useState(0)\n    const [articleCount, setArticleCount] = useState(0)\n    const [fetching, setFetching] = useState(false)\n    useEffect(() => {\n        setFetching(true)\n        Server.getMe().then(user => {\n            setUsername(user.username)\n            setTaskCount(user.task_count)\n            setID(user.id)\n            setArticleCount(user.article_count)\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return fetching ? <CircularProgress /> : (\n        <Box>\n            <h2>Welcome, {username}</h2>\n            <h3>Task Count : {taskCount}</h3>\n            <h3>Total Article Count : {articleCount}</h3>\n        </Box>\n    )\n}\n\nconst DownloadButon = ({ id }) => {\n    const download = async () => {\n        const csv = await Server.exportResult(id, 'csv')\n        const a = document.createElement('a')\n        a.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }))\n        a.download = 'result.csv'\n        a.click()\n    }\n    return <Button variant=\"contained\" color=\"primary\" onClick={download}>\n        <DownloadIcon />\n    </Button>\n}\nconst headers = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1 },\n    { field: 'status', headerName: 'Status',maxWidth: 100, flex : 1 },\n    // { field: 'topic_id', headerName: 'Topic',  flex : 1 },\n    { field: 'country', headerName: 'Country',  flex : 1 },\n    { field: 'targetwiki', headerName: 'Language', minWidth : 100, flex : 1},\n    { field: 'download', headerName: 'Download', renderCell : (params) => params.value},\n    { field: 'category_count', headerName: 'Category', maxWidth: 100, flex : 1 },\n    {field : 'article_count', headerName : 'Article', maxWidth : 100, flex : 1},\n]\nconst TaskList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const formatter = new Intl.DateTimeFormat('en-US', {\n        dateStyle: 'medium',\n        timeStyle: 'medium'\n    });\n    useEffect(() => {\n        setFetching(true)\n        Server.getTasks().then(tasks => {\n            setTasks(tasks.map(v =>  ({\n                ...v,\n                country : Server.countries[v.country] || v.country,\n                // created_at : formatter.format(new Date(v.created_at)),\n                download : v.status == 'done' && <DownloadButon id={v.id} />,\n                targetwiki : Server.languages[v.target_wiki] || v.target_wiki,\n            })))\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return <DataGrid\n        rows={tasks}\n        columns={headers}\n        initialState={{\n            pagination: {\n                paginationModel : {\n                    pageSize: 10,\n                }\n            }\n        }}\n        sx={{\n            '& .MuiDataGrid-row' : {\n                cursor : 'pointer',\n                color : 'white',\n            },\n            '& .Mui-hovered' : {\n                color : 'black'\n            },\n            '& .Mui-selected' : {\n                color : 'black'\n            },\n            '& .task-done' : {\n                backgroundColor : GREEN[800],\n                color : 'white',\n            },\n            '& .task-done:hover' : {\n                backgroundColor : GREEN[600],\n                color : 'white',\n            },\n            '& .task-pending' : {\n                backgroundColor : Yellow[300],\n                color : 'black'\n            },\n            '& .task-failed' : {\n                backgroundColor : RED[300],\n            },\n        }}\n        rowsPerPageOptions={[5]}\n        checkboxSelection={false}\n        disableSelectionOnClick={true}\n        rowSelection={false}\n        getRowClassName={(params) => `task-${params.row.status} .task`}\n        loading={fetching}\n    />\n\n}\nconst ListTask = () => {\n    const NewTaskButton = () => (\n        <Link to=\"/fnf/task/create\">\n           <Button variant=\"contained\" color=\"success\"><AddIcon /> New List</Button>\n        </Link>\n    )\n    return (\n        <Card>\n            \n            <CardHeader action={<NewTaskButton />}/>\n            <CardContent>\n            <User />\n                <TaskList />\n                <Footer />\n            </CardContent>\n        </Card>\n    )\n}\nexport default ListTask","import SelectInput from \"@mui/material/Select/SelectInput\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport PowerSettingsNewIcon from '@mui/icons-material/PowerSettingsNew';\nimport HideIcon from '@mui/icons-material/VisibilityOff';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Collapse from \"@mui/material/Collapse\"\nimport Server from \"../Server.ts\";\nimport { useCallback, useState } from \"react\";\nimport Footer from \"../../Layout/Footer.jsx\";\nconst Settings = () => {\n    const [users, setUsers] = useState([])\n    const hideUsername = useCallback((e) => {\n        const message = `\n        Are you want to hide your username from all the records?\n        This action is irreversible and it would:\n        - Hide your username from all the records\n        - Keep your central ID intact\n        - log you out from now. You need to login again to continue\n        `\n        if (window.confirm(message))\n            Server.updateMe({ username: \"Hidden\" }).then(user => {\n                fetch('/user/logout', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({})\n                }).then(res => {\n                    window.location.href = '/'\n                })\n            })\n    }, []);\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            {/* <Collapse in={true}>\n                <AutoComplete\n                options={users}\n                sx={{m : 1}}\n                renderInput={props => <TextField {...props} label=\"Username\" />}\n                />\n            </Collapse> */}\n\n            <Button variant=\"contained\" color=\"error\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                onClick={hideUsername}\n            >\n                <HideIcon /> &nbsp; Hide my username\n            </Button>\n\n            <Footer />\n        </Paper>\n    )\n}\nexport default Settings","import { Box, Button, Card, CardActions, CardContent, Paper, Typography } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport AddIcon from '@mui/icons-material/Add';\nimport ListIcon from '@mui/icons-material/List';\nimport SettingIcon from '@mui/icons-material/Settings';\nimport PeopleIcon from '@mui/icons-material/People';\nimport Footer from \"../Layout/Footer\";\nimport Server from \"./Server\";\nexport default function Description({ user }) {\n    const sections = [];\n    if(Server.hasAccess(user.rights, Server.RIGHTS.TASK))\n        sections.push(\n            <Box key=\"task\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>List Generation</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/task/create\"\n            >\n                <AddIcon /> &nbsp; Add Task\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/task\"\n            >\n                <ListIcon /> &nbsp; List Tasks\n            </Button>\n        </Box>\n        );\n    if(Server.hasAccess(user.rights, Server.RIGHTS.TOPIC))\n        sections.push(\n            <Box key=\"topic\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>Topic Management</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/topic/create\"\n            >\n                <AddIcon /> &nbsp; Create New Topic\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/topic\"\n            >\n                <ListIcon /> &nbsp; See All Topics\n            </Button>\n        </Box>\n        );\n    if(Server.hasAccess(user.rights, Server.RIGHTS.STATS))\n        sections.push(\n            <Box key=\"user\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>User Management</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/setting\"\n            >\n                <SettingIcon /> &nbsp; Settings\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/fnf/user\"\n            >\n                <PeopleIcon /> &nbsp; See All Users\n            </Button>\n        </Box>\n        );\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            <Typography variant=\"title\" component=\"h2\" sx={{\n                textAlign: 'center',\n                m: 2\n            }}>\n                Welcome {user.username},<br/>\n            </Typography>\n            <Typography sx={{ mb: 1.5, textAlign: 'center' }} color=\"text.secondary\">\n            This is a tool to generate a list of articles that are present in the English Wikipedia,\n                but not present in your native langauge Wikipedia. The tool would generate the list based on your selection and show \n                you the list of articles that are missing in your native language Wikipedia with suggested title.\n                The output would be in a form of a table, but you can also download the list in a CSV format,\n                and a wikitables format.\n            </Typography>\n            <hr />\n            \n            {sections}\n            <Footer />\n        </Paper>\n    )\n}","import { Routes, Route } from \"react-router-dom\"\nimport React, { lazy } from \"react\"\nimport AddTask from \"./Pages/Tasks/AddTask.jsx\";\nimport ListTask from \"./Pages/Tasks/ListTask.jsx\"\nimport Setting from \"./Pages/Settings.jsx\";\nimport DashBoard from \"./Dashboard.jsx\";\nimport Server from \"./Server.ts\"\nconst AddTopic = lazy(() => import('./Pages/Topics/CreateTopic.jsx'))\nconst EditTopic = lazy(() => import('./Pages/Topics/EditTopic.jsx'))\nconst ListTopic = lazy(() => import('./Pages/Topics/ListTopics.jsx'))\n\nconst ListUser = lazy(() => import('./Pages/User/ListUser.jsx'));\nconst EditUser = lazy(() => import('./Pages/User/EditUser.jsx'));\nServer.init()\nconst FnF = ({ user }) => {\n    const TopicRoutes = (\n        <Route path='topic/*'>\n            <Route path=\"create\" element={<AddTopic />} />\n            <Route path=\"edit\" element={<EditTopic />} />\n            <Route path=\"*\" element={<ListTopic />} />\n        </Route>\n    )\n    const UserRoutes = (\n        <Route path='user/*'>\n            <Route path=\"edit\" element={<EditUser user={user} />} />\n            <Route path=\"*\" element={<ListUser user={user} />} />\n        </Route>\n    )\n    return (\n        <Routes>\n            {Server.hasAccess(user.rights, Server.RIGHTS.TOPIC) && TopicRoutes}\n            {Server.hasAccess(user.rights, Server.RIGHTS.GRANT) && UserRoutes}\n            <Route path=\"task/*\" >\n                <Route path=\"create\" element={<AddTask />} />\n                <Route path=\"*\" element={<ListTask />} />\n            </Route>\n            <Route path=\"setting\" element={<Setting />} />\n            <Route path=\"*\" element={<DashBoard user={user} />} />\n        </Routes>\n    )\n}\n\nexport default FnF","import Paper from \"@mui/material/Paper\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CodeIcon from '@mui/icons-material/Code';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Collapse from \"@mui/material/Collapse\"\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport Server from \"../Server.ts\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Typography from '@mui/material/Typography';\n\n\n\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\n\nconst Popup = ({ open, onClose, englishTitle, suggestedTargetTitle, languageCode, action }) => {\n    const [targetTitle, setTargetTitle] = React.useState(suggestedTargetTitle);\n    useEffect(() => {\n        setTargetTitle(suggestedTargetTitle)\n    }, [suggestedTargetTitle])\n    const data = {\n        title: '',\n        targetURL: '',\n        buttonName: ''\n    }\n    if (action == 'translate') {\n        data.title = 'Translate'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=Special:ContentTranslation&campaign=fnf&from=en&page=${englishTitle}&to=${languageCode}&targettitle=${targetTitle}`\n        data.buttonName = 'Translate'\n    } else {\n        data.title = 'Create'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=${targetTitle}&campaign=fnf&from=en&page=${englishTitle}&to=${targetTitle}&action=edit`\n        data.buttonName = 'Create'\n    }\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{data.title}</DialogTitle>\n            <DialogContent>\n                <Typography variant=\"body1\" gutterBottom >\n                    <b>English : <a href={\"https://en.wikipedia.org/wiki/\" + englishTitle} target=\"_blank\" style={{ textDecoration: 'none' }}>{englishTitle}</a></b>\n                </Typography>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Target Title\"\n                    multiline\n                    value={targetTitle}\n                    fullWidth\n                    onChange={e => setTargetTitle(e.target.value)}\n                    sx={{\n                        mt: 1\n                    }}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button sx={{ mr: 1 }} onClick={() => onClose(null)} color=\"secondary\" variant=\"contained\" size=\"small\">\n                    Cancel\n                </Button>\n                <Button color=\"primary\" variant=\"contained\" component=\"a\" size=\"small\" href={data.targetURL} target=\"_blank\" autoFocus>\n                    {data.buttonName}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\nconst COLUMNS = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1, hideable: false },\n    { field: 'action', headerName: 'Action', flex: 1, minWidth: 150, hideable: false, renderCell: (params) => params.value },\n    { field: 'title', headerName: 'Title', flex: 1, hideable: false, minWidth: 300 },\n    // { field: 'wikidata', headerName: 'Wikidata', width : 120},\n    { field: 'target', headerName: 'Target', flex: 1, minWidth: 300 },\n   \n]\nconst TabledArticles = ({ data, targetLanguage, taskID }) => {\n    const [popupAction, setPopupAction] = React.useState(null);\n    const [popupOpen, setPopupOpen] = React.useState(false);\n    const [popupEnglishTitle, setPopupEnglishTitle] = React.useState('');\n    const [popupSuggestedTargetTitle, setPopupSuggestedTargetTitle] = React.useState('');\n    const executeAction = (e) => {\n        setPopupAction(e.currentTarget.dataset.action)\n        setPopupEnglishTitle(e.currentTarget.dataset.src)\n        setPopupSuggestedTargetTitle(e.currentTarget.dataset.target)\n        setPopupOpen(true)\n    }\n    const rows = useMemo(() => data?.map((article, index) => ({\n        id: index + 1,\n        title: article?.title,\n        wikidata: article?.wikidata,\n        target: article?.target,\n        action: (\n            <>\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" data-action=\"create\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <AddIcon />\n                </Button>\n                <Button variant=\"contained\" sx={{ml : 1}} color=\"primary\" size=\"small\" data-action=\"translate\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <TranslateIcon />\n                </Button>\n            </>\n        )\n    })), [data, taskID]);\n    return (\n        <>\n            <Popup\n                open={popupOpen}\n                action={popupAction}\n                onClose={() => setPopupOpen(false)}\n                suggestedTargetTitle={popupSuggestedTargetTitle}\n                englishTitle={popupEnglishTitle}\n                languageCode={targetLanguage}\n            />\n            <DataGrid\n                rows={rows}\n                columns={COLUMNS}\n                pageSize={50}\n                rowsPerPageOptions={[50]}\n                checkboxSelection={false}\n                disableSelectionOnClick\n                initialState={{\n                    pagination: {\n                        paginationModel: { pageSize: 25 },\n                    },\n                }}\n                sx={{\n                    width: '100%',\n                }}\n            />\n        </>\n    )\n}\n\nconst WikiTextArticles = ({ data }) => {\n    return (\n        <TextField\n            id=\"outlined-multiline-static\"\n            label={null}\n            multiline\n            rows={4}\n            value={data}\n            fullWidth\n            onClick={e => e.target.select()}\n        />\n    )\n}\nconst ArticleList = ({ taskID, statusRef, setDisabled, targetLanguage }) => {\n    const [data, setData] = React.useState([]);\n    const [wikitext, setWikiText] = React.useState('');\n    const [showWikiText, setShowWikiText] = React.useState(false);\n    const [csv, setCSV] = React.useState(null);\n    const [json, setJSON] = React.useState(null);\n    const [statusCheckerTimer, setStatusCheckerTimer] = React.useState(0);\n    const [articleCount, setArticleCount] = React.useState(0);\n    const [processedCategory, setProcessedCategory] = React.useState('');\n    const [processedCount, setProcessedCount] = React.useState(0);\n    const [generating, setGenerating] = React.useState(false);\n    statusRef.current = generating\n    const checkTaskStatus = useCallback(async () => {\n        // console.log(\"Checking status\")\n        const task = await Server.getTask(taskID)\n        if (task.status != 'pending') {\n            // console.log(\"Timer Cleared\", statusCheckerTimer)\n            setGenerating(false);\n            setDisabled(false);\n            setStatusCheckerTimer(0)\n            if (task.status == 'done') {\n                exportTable();\n            } else if (task.status == 'failed') {\n                alert(\"Task Failed\")\n            }\n        } else {\n            setGenerating(true);\n            setDisabled(true);\n            setStatusCheckerTimer(setTimeout(checkTaskStatus, 1000))\n            setData([]);\n        }\n        setArticleCount(task.article_count);\n        setProcessedCategory(task.last_category);\n        setProcessedCount(task.category_count);\n    }, [taskID]);\n    const exportCSV = useCallback(async () => {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(taskID, 'csv');\n            setCSV(csv)\n            return download(taskID, csv)\n        };\n        return download(taskID, csv)\n\n    }, [taskID,]);\n    const exportWikiTextToggle = useCallback(async () => {\n        if (showWikiText)\n            // hide the wikitext\n            setShowWikiText(false)\n        else {\n            if (!wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(taskID, 'wikitext');\n                setShowWikiText(true)\n                setWikiText(wikitext)\n            }\n            else\n                setShowWikiText(true)\n        }\n    }, [taskID, showWikiText]);\n    const exportTable = useCallback(async () => {\n        const cats = await Server.exportResult(taskID, 'json');\n        setData(cats);\n        setJSON(JSON.stringify(cats));\n    }, [taskID]);\n\n    React.useEffect(() => {\n        checkTaskStatus();\n        return () => {\n            clearTimeout(statusCheckerTimer);\n            setStatusCheckerTimer(0)\n        }\n    }, [taskID, checkTaskStatus]);\n    const Actions = (\n        <Box sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n            '& > *': {\n                m: 1,\n            },\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportWikiTextToggle} disabled={generating} size=\"small\" sx={{mr : 1}}>\n                <CodeIcon /> Wiki\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportCSV} disabled={generating} size=\"small\" >\n                <DownloadIcon /> CSV\n            </Button>\n        </Box>\n    );\n    const GeneratorStatus = (\n        <Box sx={{\n            fontSize: '16px'\n        }}>\n            Article count : {articleCount}<br />\n            Processed Count : {processedCount}<br />\n            Last Category: {processedCategory}<br />\n        </Box>\n    )\n    return <Card sx={\n        { m: '5px' }\n    }>\n        <CardHeader action={Actions} title={GeneratorStatus} />\n        <CardContent>\n            {generating ? <CircularProgress /> : (\n                <>\n                    <Collapse in={showWikiText}>\n                        <WikiTextArticles data={wikitext} />\n                    </Collapse>\n                    {data && <TabledArticles data={data} targetLanguage={targetLanguage} taskID={taskID} />}\n                </>\n            )}\n        </CardContent>\n    </Card>\n}\nexport default ArticleList","import Paper from \"@mui/material/Paper\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport Server from \"../Server.ts\";\nconst Category = ({ category, onRemove, onSubCategory }) => {\n    return (\n        <ListItem>\n            <ListItemText sx={{\n                padding: '5px'\n            }} primary={category?.title} />\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onSubCategory(category?.id)}>\n                <WaterfallChartIcon />\n            </Button>\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onRemove(category?.id)}>\n                <DeleteIcon />\n            </Button>\n        </ListItem>\n    )\n}\nconst AddCategory = ({ onAdd, disabled }) => {\n    const [searching, setSearching] = React.useState(false);\n    const [categorySuggestions, setCategorySuggestions] = React.useState([]); // [{title: 'cat1'}, {title: 'cat2'}\n    const [newCat, setNewCat] = React.useState('');\n    const onInput = React.useCallback(Server.searchCategory(setCategorySuggestions, setSearching), []);\n    const _onAdd = React.useCallback((e) => {\n        const category = categorySuggestions.find(cat => cat.title === newCat);\n        if (!category)\n            return;\n        onAdd(category);\n        setNewCat('');\n    }, [categorySuggestions, newCat]);\n    return (\n        <Box sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            // justifyContent: 'center',\n            width: '100%',\n            height: '100%',\n\n        }}>\n            <AutoComplete\n                id=\"new-category\"\n                options={categorySuggestions}\n                disabled={disabled}\n                size=\"small\"\n                clearOnBlur\n                clearOnEscape\n                loading={searching}\n                getOptionLabel={(option) => option?.title || ''}\n                sx={{\n                    width: '100%',\n                    maxWidth: '400px',\n                    marginRight: '10px',\n                    marginLeft: '10px'\n                }}\n                renderInput={(params) => <TextField\n                    {...params} disabled={disabled}\n                    onInput={onInput}\n                    onSelect={e => setNewCat(e.target.value)}\n                    label=\"Add Category\"\n                />}\n            />\n            <Button disabled={disabled} variant=\"contained\" color=\"success\" onClick={_onAdd} >\n                <AddIcon />\n            </Button>\n        </Box>\n    )\n}\nconst CategoryList = ({ categoryListRef, initialCategories, disabled = false }) => {\n    const [categoryObject, setCategoryObject] = React.useState({});// {categoryName: {categoryObject}\n    const categories = React.useMemo(() => {\n        return Object.values(categoryObject);\n    }, [categoryObject]);\n    const onRemove = React.useCallback((ccatID) => {\n        if (!ccatID)\n            return\n        if (!categoryObject[ccatID])\n            return\n        delete categoryObject[ccatID];\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onAdd = React.useCallback((category) => {\n        if (!category)\n            return\n        if (categoryObject[category.id])\n            return\n        categoryObject[category.id] = category;\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onSubCategory = React.useCallback((catID) => {\n        console.log('onSubCategory', catID)\n        const cat = categoryObject[catID];\n        if (!cat)\n            return\n        Server.addSubCategories([cat]).then(categories => {\n            categories.forEach(cat => {\n                categoryObject[cat.id] = cat;\n            });\n            setCategoryObject({ ...categoryObject });\n        });\n    }, [categoryObject]);\n    // Populate the categories\n    React.useEffect(() => {\n        if (categoryListRef)\n            categoryListRef.current = categories;\n    }, [categories, categoryListRef]);\n    React.useEffect(() => {\n        if (!initialCategories?.length)\n            return;\n        setCategoryObject(initialCategories?.reduce((dict, v) => { dict[v.id] = v; return dict }, {}))\n    }, [initialCategories]);\n    return (\n        <Paper elevation={0}>\n            <List dense={true}>\n                {categories?.map((category, index) => (\n                    <React.Fragment key={\"cat\" + index}>\n                        <Category category={category} onRemove={onRemove} onSubCategory={onSubCategory} />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List><br />\n            {/* // show button and the input in the same box */}\n            <AddCategory onAdd={onAdd} disabled={disabled} />\n        </Paper>\n    )\n}\nexport default CategoryList"],"names":["categoryListRef","React","_useState","useState","_useState2","_slicedToArray","countries","setCountries","_useState3","_useState4","setTaskID","_useState5","_useState6","disabled","setDisabled","_useState7","_useState8","topicName","_useState9","_useState10","country","setCountry","_useState11","_useState12","targetwiki","setTargetwiki","_useState13","_useState14","categoryExpanded","setCategoryExpanded","_useState15","_useState16","categoryFetching","setCategoryFetching","_useState17","_useState18","targetWikiError","setTargetWikiError","_useState19","_useState20","defaultCategories","setDefaultCategories","_useState21","_useState22","resultElement","setResultElement","statusRef","wiki","_i","_Object$entries","Object","entries","Server","languages","length","_Object$entries$_i","key","value","push","id","label","sort","a","b","localeCompare","useEffect","fetchCountries","then","_toConsumableArray","getCategories","topic","categories","finally","e","submitTask","useCallback","categoryList","current","target_wiki","topic_id","task_data","response","taskID","_jsx","ArticleList","targetLanguage","_jsxs","Card","children","CardHeader","title","action","Button","variant","color","onClick","size","ListIcon","CardContent","Box","sx","display","justifyContent","flexDirection","FormControl","width","InputLabel","Select","fullWidth","onChange","target","map","v","MenuItem","ml","error","padding","CollapseIcon","ExpandedIcon","Collapse","in","CircularProgress","CategoryList","initialCategories","Footer","User","username","setUsername","setID","taskCount","setTaskCount","articleCount","setArticleCount","fetching","setFetching","getMe","user","task_count","article_count","DownloadButon","_ref","download","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","csv","wrap","_context","prev","next","exportResult","sent","document","createElement","href","URL","createObjectURL","Blob","type","click","stop","apply","arguments","DownloadIcon","headers","field","headerName","maxWidth","flex","minWidth","renderCell","params","TaskList","tasks","setTasks","Intl","DateTimeFormat","dateStyle","timeStyle","getTasks","_objectSpread","status","DataGrid","rows","columns","initialState","pagination","paginationModel","pageSize","cursor","backgroundColor","GREEN","Yellow","RED","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","rowSelection","getRowClassName","concat","row","loading","NewTaskButton","Link","to","AddIcon","hideUsername","window","confirm","updateMe","fetch","method","body","JSON","stringify","res","location","Paper","height","m","border","outline","position","HideIcon","Description","sections","hasAccess","rights","RIGHTS","TASK","p","alignItems","component","TOPIC","STATS","SettingIcon","PeopleIcon","Typography","textAlign","mb","AddTopic","lazy","EditTopic","ListTopic","ListUser","EditUser","init","TopicRoutes","Route","path","element","UserRoutes","Routes","GRANT","AddTask","ListTask","Setting","DashBoard","Popup","open","onClose","englishTitle","suggestedTargetTitle","languageCode","_React$useState","_React$useState2","targetTitle","setTargetTitle","data","targetURL","buttonName","Dialog","DialogTitle","DialogContent","gutterBottom","style","textDecoration","TextField","multiline","mt","DialogActions","mr","autoFocus","COLUMNS","hideable","TabledArticles","_React$useState3","_React$useState4","popupAction","setPopupAction","_React$useState5","_React$useState6","popupOpen","setPopupOpen","_React$useState7","_React$useState8","popupEnglishTitle","setPopupEnglishTitle","_React$useState9","_React$useState10","popupSuggestedTargetTitle","setPopupSuggestedTargetTitle","executeAction","currentTarget","dataset","src","useMemo","article","index","wikidata","_Fragment","TranslateIcon","WikiTextArticles","_ref3","select","_ref4","_React$useState11","_React$useState12","setData","_React$useState13","_React$useState14","wikitext","setWikiText","_React$useState15","_React$useState16","showWikiText","setShowWikiText","_React$useState17","_React$useState18","setCSV","_React$useState19","_React$useState20","setJSON","_React$useState21","_React$useState22","statusCheckerTimer","setStatusCheckerTimer","_React$useState23","_React$useState24","_React$useState25","_React$useState26","processedCategory","setProcessedCategory","_React$useState27","_React$useState28","processedCount","setProcessedCount","_React$useState29","_React$useState30","generating","setGenerating","checkTaskStatus","task","getTask","exportTable","alert","setTimeout","last_category","category_count","exportCSV","_callee2","_csv","_context2","remove","abrupt","exportWikiTextToggle","_callee3","_wikitext","_context3","_callee4","cats","_context4","clearTimeout","Actions","CodeIcon","GeneratorStatus","fontSize","Category","category","onRemove","onSubCategory","ListItem","ListItemText","primary","WaterfallChartIcon","DeleteIcon","AddCategory","onAdd","searching","setSearching","categorySuggestions","setCategorySuggestions","newCat","setNewCat","onInput","searchCategory","_onAdd","find","cat","AutoComplete","options","clearOnBlur","clearOnEscape","getOptionLabel","option","marginRight","marginLeft","renderInput","onSelect","_ref3$disabled","categoryObject","setCategoryObject","values","ccatID","catID","console","log","addSubCategories","forEach","reduce","dict","elevation","List","dense","Divider"],"sourceRoot":""}