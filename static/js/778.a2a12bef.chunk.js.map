{"version":3,"file":"static/js/778.a2a12bef.chunk.js","mappings":"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","sources":["TukTukBot/Dashboard.jsx","TukTukBot/Pages/Settings.jsx","TukTukBot/Pages/Tasks/AddTask.jsx","TukTukBot/Pages/Tasks/ListTask.jsx","TukTukBot/TukTukBot.jsx","TukTukBot/components/Articles.jsx","TukTukBot/components/Category.jsx"],"sourcesContent":["import { Box, Button, Card, CardActions, CardContent, Paper, Typography } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport AddIcon from '@mui/icons-material/Add';\nimport ListIcon from '@mui/icons-material/List';\nimport SettingIcon from '@mui/icons-material/Settings';\nimport PeopleIcon from '@mui/icons-material/People';\nimport Footer from \"../Layout/Footer\";\nimport Server from \"./Server\";\nexport default function Description({ user }) {\n    const sections = [];\n    if(Server.hasAccess(user.rights, Server.RIGHTS.TASK))\n        sections.push(\n            <Box key=\"task\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>List Generation</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/tuktukbot/task/create\"\n            >\n                <AddIcon /> &nbsp; Add Task\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/tuktukbot/task\"\n            >\n                <ListIcon /> &nbsp; List Tasks\n            </Button>\n        </Box>\n        );\n    if(Server.hasAccess(user.rights, Server.RIGHTS.TOPIC))\n        sections.push(\n            <Box key=\"topic\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>Topic Management</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/tuktukbot/topic/create\"\n            >\n                <AddIcon /> &nbsp; Create New Topic\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/tuktukbot/topic\"\n            >\n                <ListIcon /> &nbsp; See All Topics\n            </Button>\n        </Box>\n        );\n    if(Server.hasAccess(user.rights, Server.RIGHTS.STATS))\n        sections.push(\n            <Box key=\"user\" sx={{ display: 'flex', flexDirection: 'row', p: 1, alignItems: 'center', justifyContent: 'center' }} component=\"fieldset\">\n            <legend>User Management</legend>\n            <Button variant=\"contained\" color=\"primary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/tuktukbot/setting\"\n            >\n                <SettingIcon /> &nbsp; Settings\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                component={Link}\n                to=\"/tuktukbot/user\"\n            >\n                <PeopleIcon /> &nbsp; See All Users\n            </Button>\n        </Box>\n        );\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            <Typography variant=\"title\" component=\"h2\" sx={{\n                textAlign: 'center',\n                m: 2\n            }}>\n                Welcome to TukTuk\n            </Typography>\n            <Typography sx={{ mb: 1.5, textAlign: 'center' }} color=\"text.secondary\">\n                This is a tool to help you manage your tasks and topics.\n            </Typography>\n            <hr />\n            \n            {sections}\n            <Footer />\n        </Paper>\n    )\n}","import SelectInput from \"@mui/material/Select/SelectInput\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport PowerSettingsNewIcon from '@mui/icons-material/PowerSettingsNew';\nimport HideIcon from '@mui/icons-material/VisibilityOff';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Collapse from \"@mui/material/Collapse\"\nimport Server from \"../Server.ts\";\nimport { useCallback, useState } from \"react\";\nimport Footer from \"../../Layout/Footer.jsx\";\nconst Settings = () => {\n    const [users, setUsers] = useState([])\n    const hideUsername = useCallback((e) => {\n        const message = `\n        Are you want to hide your username from all the records?\n        This action is irreversible and it would:\n        - Hide your username from all the records\n        - Keep your central ID intact\n        - log you out from now. You need to login again to continue\n        `\n        if (window.confirm(message))\n            Server.updateMe({ username: \"Hidden\" }).then(user => {\n                fetch('/user/logout', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({})\n                }).then(res => {\n                    window.location.href = '/user/login'\n                })\n            })\n    }, []);\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            {/* <Collapse in={true}>\n                <AutoComplete\n                options={users}\n                sx={{m : 1}}\n                renderInput={props => <TextField {...props} label=\"Username\" />}\n                />\n            </Collapse> */}\n\n            <Button variant=\"contained\" color=\"error\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                onClick={hideUsername}\n            >\n                <HideIcon /> &nbsp; Hide my username\n            </Button>\n\n            <Footer />\n        </Paper>\n    )\n}\nexport default Settings","import CategoryList from \"../../components/Category\";\nimport ListIcon from '@mui/icons-material/List';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport Server from \"../../Server\";\nimport Footer from \"../../../Layout/Footer\";\n\nfunction AddTask() {\n    const categoryListRef = React.useRef([]);\n    const [countries, setCountries] = useState([]);\n    const [taskID, setTaskID] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [topicName, setTopicName] = useState('folklore');\n    const [country, setCountry] = useState('BD');\n    const [targetwiki, setTargetwiki] = useState('');\n    const [categoryExpanded, setCategoryExpanded] = useState(true);\n    const [categoryFetching, setCategoryFetching] = useState(false);\n    const [targetWikiError, setTargetWikiError] = useState(false);\n    const [defaultCategories, setDefaultCategories] = useState([]);\n    const [resultElement, setResultElement] = useState(null);\n    const statusRef = React.useRef(false);\n    const wiki = []\n    for (const [key, value] of Object.entries(Server.languages)) {\n        wiki.push({ id: key, label: value })\n    }\n    wiki.sort((a, b) => a.label.localeCompare(b.label));\n    useEffect(() => {\n        Server.fetchCountries(topicName).then(countries => {\n            setCountries([...countries]);\n        })\n    }, [topicName])\n    useEffect(() => {\n        if (!country)\n            return;\n        if (!topicName)\n            return;\n        setDisabled(true);\n        setCategoryFetching(true);\n        Server.getCategories({ country: country, topic: topicName })\n            .then(categories => {\n                setDisabled(false);\n                setDefaultCategories(categories)\n            }).finally(e => {\n                // console.log(e)\n                setDisabled(false);\n                setCategoryFetching(false);\n            })\n    }, [country, topicName]);\n    const submitTask = useCallback(() => {\n        // submit task logic\n        const categoryList = categoryListRef?.current;\n        if (!categoryList?.length)\n            return;\n        if(!targetwiki){\n            setTargetWikiError(true);\n            return;\n        } else {\n            setTargetWikiError(false);\n        }\n        if ( !country || !categoryList || !topicName)\n            return;\n        setDisabled(true);\n        setResultElement(null);\n        Server.submitTask({\n            target_wiki: targetwiki,\n            country: country,\n            categories: categoryList,\n            topic_id: topicName,\n            task_data: categoryList\n        }).then(response => {\n            const taskID = response?.id;\n            setTaskID(taskID);\n            // console.log(response)\n            setDisabled(false);\n            setCategoryExpanded(false);\n            setResultElement(<ArticleList\n                Server={Server}\n                taskID={taskID}\n                statusRef={statusRef}\n                setDisabled={setDisabled}\n                targetLanguage={targetwiki}\n            />)\n        })\n    }, [targetwiki]);\n    return (\n        <Card>\n            <CardHeader title=\"Add Task\" action={\n                <Button variant=\"contained\" color=\"success\" onClick={submitTask} disabled={disabled} size=\"small\">\n                    <ListIcon /> Generate\n                </Button>\n            } />\n            <CardContent>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'left',\n                    flexDirection: 'row',\n                    // borderSpacing: 1\n                }}>\n                    <FormControl sx={{ width: 300 }} size=\"small\">\n                        <InputLabel>Country</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            value={country}\n                            label=\"Country\"\n                            onChange={e => e.target.value && setCountry(e.target.value)}\n                        >\n                            {countries.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ width: 300, ml: 0.5 }} size=\"small\">\n                        <InputLabel>Target Wiki</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            error={targetWikiError}\n                            value={targetwiki}\n                            label=\"Target Wiki\"\n                            onChange={e => e.target.value && setTargetwiki(e.target.value)}\n                        >\n                            {wiki.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant=\"contained\"\n                        disabled={disabled}\n                        // color=\"secondary\"\n                        onClick={e => setCategoryExpanded(!categoryExpanded)}\n                        size=\"small\"\n                        sx={{\n                            padding : 1\n                        }}\n                        >\n                        {categoryExpanded ? <CollapseIcon /> : <ExpandedIcon />}\n                    </Button>\n                </Box>\n\n                <Collapse in={categoryExpanded}>\n                    {categoryFetching ? <CircularProgress /> : (\n                        <CategoryList\n                            disabled={disabled}\n                            categoryListRef={categoryListRef}\n                            Server={Server}\n                            initialCategories={defaultCategories}\n\n                        />\n                    )}\n                </Collapse>\n                {resultElement}\n\n            <Footer />\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default AddTask","\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CardActions, CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nimport GREEN from \"@mui/material/colors/green\";\nimport RED from \"@mui/material/colors/red\";\nimport Yellow from \"@mui/material/colors/yellow\";\nimport Server from \"../../Server\"\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@mui/icons-material/Add';\nimport Footer from '../../../Layout/Footer';\nconst countryMAP = await Server.getCountryMap()\nconst User = () => {\n    const [username, setUsername] = useState(null);\n    const [id, setID] = useState(0)\n    const [taskCount, setTaskCount] = useState(0)\n    const [articleCount, setArticleCount] = useState(0)\n    const [fetching, setFetching] = useState(false)\n    useEffect(() => {\n        setFetching(true)\n        Server.getMe().then(user => {\n            setUsername(user.username)\n            setTaskCount(user.task_count)\n            setID(user.id)\n            setArticleCount(user.article_count)\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return fetching ? <CircularProgress /> : (\n        <Box>\n            <h2>Welcome, {username}</h2>\n            <h3>Task Count : {taskCount}</h3>\n            <h3>Total Article Count : {articleCount}</h3>\n        </Box>\n    )\n}\n\nconst DownloadButon = ({ id }) => {\n    const download = async () => {\n        const csv = await Server.exportResult(id, 'csv')\n        const a = document.createElement('a')\n        a.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }))\n        a.download = 'result.csv'\n        a.click()\n    }\n    return <Button variant=\"contained\" color=\"primary\" onClick={download}>\n        <DownloadIcon />\n    </Button>\n}\nconst headers = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1 },\n    { field: 'status', headerName: 'Status',maxWidth: 100, flex : 1 },\n    { field: 'topic_id', headerName: 'Topic',  flex : 1 },\n    { field: 'country', headerName: 'Country',  flex : 1 },\n    { field: 'category_count', headerName: 'Category', maxWidth: 100, flex : 1 },\n    {field : 'article_count', headerName : 'Article', maxWidth : 100, flex : 1},\n    // { field: 'created_at', headerName: 'Timestamp', flex : 1},\n    { field: 'download', headerName: 'Download', renderCell : (params) => params.value},\n]\nconst TaskList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const formatter = new Intl.DateTimeFormat('en-US', {\n        dateStyle: 'medium',\n        timeStyle: 'medium'\n    });\n    useEffect(() => {\n        setFetching(true)\n        Server.getTasks().then(tasks => {\n            setTasks(tasks.map(v => ({\n                ...v,\n                country : countryMAP[v.country] || v.country,\n                created_at : formatter.format(new Date(v.created_at)),\n                download : v.status == 'done' && <DownloadButon id={v.id} />\n            })))\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return <DataGrid\n        rows={tasks}\n        columns={headers}\n        initialState={{\n            pagination: {\n                paginationModel : {\n                    pageSize: 10,\n                }\n            }\n        }}\n        sx={{\n            '& .MuiDataGrid-row' : {\n                cursor : 'pointer',\n                color : 'white',\n            },\n            '& .Mui-hovered' : {\n                color : 'black'\n            },\n            '& .Mui-selected' : {\n                color : 'black'\n            },\n            '& .task-done' : {\n                backgroundColor : GREEN[800],\n                color : 'white',\n            },\n            '& .task-done:hover' : {\n                backgroundColor : GREEN[600],\n                color : 'white',\n            },\n            '& .task-pending' : {\n                backgroundColor : Yellow[300],\n                color : 'black'\n            },\n            '& .task-failed' : {\n                backgroundColor : RED[300],\n            },\n        }}\n        rowsPerPageOptions={[5]}\n        checkboxSelection={false}\n        disableSelectionOnClick={true}\n        rowSelection={false}\n        getRowClassName={(params) => `task-${params.row.status} .task`}\n        loading={fetching}\n    />\n\n}\nconst ListTask = () => {\n    const NewTaskButton = () => (\n        <Link to=\"/tuktukbot/task/create\">\n           <Button variant=\"contained\" color=\"success\"><AddIcon /> New List</Button>\n        </Link>\n    )\n    return (\n        <Card>\n            \n            <CardHeader action={<NewTaskButton />}/>\n            <CardContent>\n            <User />\n                <TaskList />\n                <Footer />\n            </CardContent>\n        </Card>\n    )\n}\nexport default ListTask","import { Routes, Route } from \"react-router-dom\"\nimport React, { lazy } from \"react\"\nimport AddTask from \"./Pages/Tasks/AddTask.jsx\";\nimport ListTask from \"./Pages/Tasks/ListTask.jsx\"\nimport Setting from \"./Pages/Settings.jsx\";\nimport DashBoard from \"./Dashboard.jsx\";\nimport Server from \"./Server.ts\"\nconst AddTopic = lazy(() => import('./Pages/Topics/CreateTopic.jsx'))\nconst EditTopic = lazy(() => import('./Pages/Topics/EditTopic.jsx'))\nconst ListTopic = lazy(() => import('./Pages/Topics/ListTopics.jsx'))\n\nconst ListUser = lazy(() => import('./Pages/User/ListUser.jsx'));\nconst EditUser = lazy(() => import('./Pages/User/EditUser.jsx'));\nServer.init()\nconst TukTukBot = ({ user }) => {\n    const TopicRoutes = (\n        <Route path='topic/*'>\n            <Route path=\"create\" element={<AddTopic />} />\n            <Route path=\"edit\" element={<EditTopic />} />\n            <Route path=\"*\" element={<ListTopic />} />\n        </Route>\n    )\n    const UserRoutes = (\n        <Route path='user/*'>\n            <Route path=\"edit\" element={<EditUser user={user} />} />\n            <Route path=\"*\" element={<ListUser user={user} />} />\n        </Route>\n    )\n    return (\n        <Routes>\n            {Server.hasAccess(user.rights, Server.RIGHTS.TOPIC) && TopicRoutes}\n            {Server.hasAccess(user.rights, Server.RIGHTS.GRANT) && UserRoutes}\n            <Route path=\"task/*\" >\n                <Route path=\"create\" element={<AddTask />} />\n                <Route path=\"*\" element={<ListTask />} />\n            </Route>\n            <Route path=\"setting\" element={<Setting />} />\n            <Route path=\"*\" element={<DashBoard user={user} />} />\n        </Routes>\n    )\n}\n\nexport default TukTukBot","import Paper from \"@mui/material/Paper\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CodeIcon from '@mui/icons-material/Code';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Collapse from \"@mui/material/Collapse\"\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport Server from \"../Server.ts\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Typography from '@mui/material/Typography';\n\n\n\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\n\nconst Popup = ({ open, onClose, englishTitle, suggestedTargetTitle, languageCode, action }) => {\n    const [targetTitle, setTargetTitle] = React.useState(suggestedTargetTitle);\n    useEffect(() => {\n        setTargetTitle(suggestedTargetTitle)\n    }, [suggestedTargetTitle])\n    const data = {\n        title: '',\n        targetURL: '',\n        buttonName: ''\n    }\n    if (action == 'translate') {\n        data.title = 'Translate'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=Special:ContentTranslation&campaign=fnf&from=en&page=${englishTitle}&to=${languageCode}&targettitle=${targetTitle}`\n        data.buttonName = 'Translate'\n    } else {\n        data.title = 'Create'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=${targetTitle}&campaign=fnf&from=en&page=${englishTitle}&to=${targetTitle}&action=edit`\n        data.buttonName = 'Create'\n    }\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{data.title}</DialogTitle>\n            <DialogContent>\n                <Typography variant=\"body1\" gutterBottom >\n                    <b>English : <a href={\"https://en.wikipedia.org/wiki/\" + englishTitle} target=\"_blank\" style={{ textDecoration: 'none' }}>{englishTitle}</a></b>\n                </Typography>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Target Title\"\n                    multiline\n                    value={targetTitle}\n                    fullWidth\n                    onChange={e => setTargetTitle(e.target.value)}\n                    sx={{\n                        mt: 1\n                    }}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button sx={{ mr: 1 }} onClick={() => onClose(null)} color=\"secondary\" variant=\"contained\" size=\"small\">\n                    Cancel\n                </Button>\n                <Button color=\"primary\" variant=\"contained\" component=\"a\" size=\"small\" href={data.targetURL} target=\"_blank\" autoFocus>\n                    {data.buttonName}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\nconst COLUMNS = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1, hideable: false },\n    { field: 'action', headerName: 'Action', flex: 1, minWidth: 150, hideable: false, renderCell: (params) => params.value },\n    { field: 'title', headerName: 'Title', flex: 1, hideable: false, minWidth: 300 },\n    // { field: 'wikidata', headerName: 'Wikidata', width : 120},\n    { field: 'target', headerName: 'Target', flex: 1, minWidth: 300 },\n   \n]\nconst TabledArticles = ({ data, targetLanguage, taskID }) => {\n    const [popupAction, setPopupAction] = React.useState(null);\n    const [popupOpen, setPopupOpen] = React.useState(false);\n    const [popupEnglishTitle, setPopupEnglishTitle] = React.useState('');\n    const [popupSuggestedTargetTitle, setPopupSuggestedTargetTitle] = React.useState('');\n    const executeAction = (e) => {\n        setPopupAction(e.currentTarget.dataset.action)\n        setPopupEnglishTitle(e.currentTarget.dataset.src)\n        setPopupSuggestedTargetTitle(e.currentTarget.dataset.target)\n        setPopupOpen(true)\n    }\n    const rows = useMemo(() => data?.map((article, index) => ({\n        id: index + 1,\n        title: article?.title,\n        wikidata: article?.wikidata,\n        target: article?.target,\n        action: (\n            <>\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" data-action=\"create\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <AddIcon />\n                </Button>\n                <Button variant=\"contained\" sx={{ml : 1}} color=\"primary\" size=\"small\" data-action=\"translate\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <TranslateIcon />\n                </Button>\n            </>\n        )\n    })), [data, taskID]);\n    return (\n        <>\n            <Popup\n                open={popupOpen}\n                action={popupAction}\n                onClose={() => setPopupOpen(false)}\n                suggestedTargetTitle={popupSuggestedTargetTitle}\n                englishTitle={popupEnglishTitle}\n                languageCode={targetLanguage}\n            />\n            <DataGrid\n                rows={rows}\n                columns={COLUMNS}\n                pageSize={50}\n                rowsPerPageOptions={[50]}\n                checkboxSelection={false}\n                disableSelectionOnClick\n                initialState={{\n                    pagination: {\n                        paginationModel: { pageSize: 25 },\n                    },\n                }}\n                sx={{\n                    width: '100%',\n                }}\n            />\n        </>\n    )\n}\n\nconst WikiTextArticles = ({ data }) => {\n    return (\n        <TextField\n            id=\"outlined-multiline-static\"\n            label={null}\n            multiline\n            rows={4}\n            value={data}\n            fullWidth\n            onClick={e => e.target.select()}\n        />\n    )\n}\nconst ArticleList = ({ taskID, statusRef, setDisabled, targetLanguage }) => {\n    const [data, setData] = React.useState([]);\n    const [wikitext, setWikiText] = React.useState('');\n    const [showWikiText, setShowWikiText] = React.useState(false);\n    const [csv, setCSV] = React.useState(null);\n    const [json, setJSON] = React.useState(null);\n    const [statusCheckerTimer, setStatusCheckerTimer] = React.useState(0);\n    const [articleCount, setArticleCount] = React.useState(0);\n    const [processedCategory, setProcessedCategory] = React.useState('');\n    const [processedCount, setProcessedCount] = React.useState(0);\n    const [generating, setGenerating] = React.useState(false);\n    statusRef.current = generating\n    const checkTaskStatus = useCallback(async () => {\n        // console.log(\"Checking status\")\n        const task = await Server.getTask(taskID)\n        if (task.status != 'pending') {\n            // console.log(\"Timer Cleared\", statusCheckerTimer)\n            setGenerating(false);\n            setDisabled(false);\n            setStatusCheckerTimer(0)\n            if (task.status == 'done') {\n                exportTable();\n            } else if (task.status == 'failed') {\n                alert(\"Task Failed\")\n            }\n        } else {\n            setGenerating(true);\n            setDisabled(true);\n            setStatusCheckerTimer(setTimeout(checkTaskStatus, 1000))\n            setData([]);\n        }\n        setArticleCount(task.article_count);\n        setProcessedCategory(task.last_category);\n        setProcessedCount(task.category_count);\n    }, [taskID]);\n    const exportCSV = useCallback(async () => {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(taskID, 'csv');\n            setCSV(csv)\n            return download(taskID, csv)\n        };\n        return download(taskID, csv)\n\n    }, [taskID,]);\n    const exportWikiTextToggle = useCallback(async () => {\n        if (showWikiText)\n            // hide the wikitext\n            setShowWikiText(false)\n        else {\n            if (!wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(taskID, 'wikitext');\n                setShowWikiText(true)\n                setWikiText(wikitext)\n            }\n            else\n                setShowWikiText(true)\n        }\n    }, [taskID, showWikiText]);\n    const exportTable = useCallback(async () => {\n        const cats = await Server.exportResult(taskID, 'json');\n        setData(cats);\n        setJSON(JSON.stringify(cats));\n    }, [taskID]);\n\n    React.useEffect(() => {\n        checkTaskStatus();\n        return () => {\n            clearTimeout(statusCheckerTimer);\n            setStatusCheckerTimer(0)\n        }\n    }, [taskID, checkTaskStatus]);\n    const Actions = (\n        <Box sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n            '& > *': {\n                m: 1,\n            },\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportWikiTextToggle} disabled={generating} size=\"small\" sx={{mr : 1}}>\n                <CodeIcon /> Wiki\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportCSV} disabled={generating} size=\"small\" >\n                <DownloadIcon /> CSV\n            </Button>\n        </Box>\n    );\n    const GeneratorStatus = (\n        <Box sx={{\n            fontSize: '16px'\n        }}>\n            Article count : {articleCount}<br />\n            Processed Count : {processedCount}<br />\n            Last Category: {processedCategory}<br />\n        </Box>\n    )\n    return <Card sx={\n        { m: '5px' }\n    }>\n        <CardHeader action={Actions} title={GeneratorStatus} />\n        <CardContent>\n            {generating ? <CircularProgress /> : (\n                <>\n                    <Collapse in={showWikiText}>\n                        <WikiTextArticles data={wikitext} />\n                    </Collapse>\n                    {data && <TabledArticles data={data} targetLanguage={targetLanguage} taskID={taskID} />}\n                </>\n            )}\n        </CardContent>\n    </Card>\n}\nexport default ArticleList","import Paper from \"@mui/material/Paper\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport Server from \"../Server.ts\";\nconst Category = ({ category, onRemove, onSubCategory }) => {\n    return (\n        <ListItem>\n            <ListItemText sx={{\n                padding: '5px'\n            }} primary={category?.title} />\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onSubCategory(category?.id)}>\n                <WaterfallChartIcon />\n            </Button>\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onRemove(category?.id)}>\n                <DeleteIcon />\n            </Button>\n        </ListItem>\n    )\n}\nconst AddCategory = ({ onAdd, disabled }) => {\n    const [searching, setSearching] = React.useState(false);\n    const [categorySuggestions, setCategorySuggestions] = React.useState([]); // [{title: 'cat1'}, {title: 'cat2'}\n    const [newCat, setNewCat] = React.useState('');\n    const onInput = React.useCallback(Server.searchCategory(setCategorySuggestions, setSearching), []);\n    const _onAdd = React.useCallback((e) => {\n        const category = categorySuggestions.find(cat => cat.title === newCat);\n        if (!category)\n            return;\n        onAdd(category);\n        setNewCat('');\n    }, [categorySuggestions, newCat]);\n    return (\n        <Box sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            // justifyContent: 'center',\n            width: '100%',\n            height: '100%',\n\n        }}>\n            <AutoComplete\n                id=\"new-category\"\n                options={categorySuggestions}\n                disabled={disabled}\n                size=\"small\"\n                clearOnBlur\n                clearOnEscape\n                loading={searching}\n                getOptionLabel={(option) => option?.title || ''}\n                sx={{\n                    width: '100%',\n                    maxWidth: '400px',\n                    marginRight: '10px',\n                    marginLeft: '10px'\n                }}\n                renderInput={(params) => <TextField\n                    {...params} disabled={disabled}\n                    onInput={onInput}\n                    onSelect={e => setNewCat(e.target.value)}\n                    label=\"Add Category\"\n                />}\n            />\n            <Button disabled={disabled} variant=\"contained\" color=\"success\" onClick={_onAdd} >\n                <AddIcon />\n            </Button>\n        </Box>\n    )\n}\nconst CategoryList = ({ categoryListRef, initialCategories, disabled = false }) => {\n    const [categoryObject, setCategoryObject] = React.useState({});// {categoryName: {categoryObject}\n    const categories = React.useMemo(() => {\n        return Object.values(categoryObject);\n    }, [categoryObject]);\n    const onRemove = React.useCallback((ccatID) => {\n        if (!ccatID)\n            return\n        if (!categoryObject[ccatID])\n            return\n        delete categoryObject[ccatID];\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onAdd = React.useCallback((category) => {\n        if (!category)\n            return\n        if (categoryObject[category.id])\n            return\n        categoryObject[category.id] = category;\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onSubCategory = React.useCallback((catID) => {\n        console.log('onSubCategory', catID)\n        const cat = categoryObject[catID];\n        if (!cat)\n            return\n        Server.addSubCategories([cat]).then(categories => {\n            categories.forEach(cat => {\n                categoryObject[cat.id] = cat;\n            });\n            setCategoryObject({ ...categoryObject });\n        });\n    }, [categoryObject]);\n    // Populate the categories\n    React.useEffect(() => {\n        if (categoryListRef)\n            categoryListRef.current = categories;\n    }, [categories, categoryListRef]);\n    React.useEffect(() => {\n        if (!initialCategories?.length)\n            return;\n        setCategoryObject(initialCategories?.reduce((dict, v) => { dict[v.id] = v; return dict }, {}))\n    }, [initialCategories]);\n    return (\n        <Paper elevation={0}>\n            <List dense={true}>\n                {categories?.map((category, index) => (\n                    <React.Fragment key={\"cat\" + index}>\n                        <Category category={category} onRemove={onRemove} onSubCategory={onSubCategory} />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List><br />\n            {/* // show button and the input in the same box */}\n            <AddCategory onAdd={onAdd} disabled={disabled} />\n        </Paper>\n    )\n}\nexport default CategoryList"],"names":["Description","_ref","user","sections","Server","hasAccess","rights","RIGHTS","TASK","push","_jsxs","Box","sx","display","flexDirection","p","alignItems","justifyContent","component","children","_jsx","Button","variant","color","size","padding","m","Link","to","AddIcon","ListIcon","TOPIC","STATS","SettingIcon","PeopleIcon","Paper","height","width","border","outline","position","Typography","textAlign","mb","Footer","_useState","useState","_useState2","_slicedToArray","hideUsername","useCallback","e","window","confirm","updateMe","username","then","fetch","method","headers","body","JSON","stringify","res","location","href","onClick","HideIcon","categoryListRef","React","countries","setCountries","_useState3","_useState4","setTaskID","_useState5","_useState6","disabled","setDisabled","_useState7","_useState8","topicName","_useState9","_useState10","country","setCountry","_useState11","_useState12","targetwiki","setTargetwiki","_useState13","_useState14","categoryExpanded","setCategoryExpanded","_useState15","_useState16","categoryFetching","setCategoryFetching","_useState17","_useState18","targetWikiError","setTargetWikiError","_useState19","_useState20","defaultCategories","setDefaultCategories","_useState21","_useState22","resultElement","setResultElement","statusRef","wiki","_i","_Object$entries","Object","entries","languages","length","_Object$entries$_i","key","value","id","label","sort","a","b","localeCompare","useEffect","fetchCountries","_toConsumableArray","getCategories","topic","categories","finally","submitTask","categoryList","current","target_wiki","topic_id","task_data","response","taskID","ArticleList","targetLanguage","Card","CardHeader","title","action","CardContent","FormControl","InputLabel","Select","fullWidth","onChange","target","map","v","MenuItem","ml","error","CollapseIcon","ExpandedIcon","Collapse","in","CircularProgress","CategoryList","initialCategories","countryMAP","getCountryMap","User","setUsername","setID","taskCount","setTaskCount","articleCount","setArticleCount","fetching","setFetching","getMe","task_count","article_count","DownloadButon","download","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","csv","wrap","_context","prev","next","exportResult","sent","document","createElement","URL","createObjectURL","Blob","type","click","stop","apply","arguments","DownloadIcon","field","headerName","maxWidth","flex","renderCell","params","TaskList","tasks","setTasks","formatter","Intl","DateTimeFormat","dateStyle","timeStyle","getTasks","_objectSpread","created_at","format","Date","status","DataGrid","rows","columns","initialState","pagination","paginationModel","pageSize","cursor","backgroundColor","GREEN","Yellow","RED","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","rowSelection","getRowClassName","concat","row","loading","NewTaskButton","AddTopic","lazy","EditTopic","ListTopic","ListUser","EditUser","init","TopicRoutes","Route","path","element","UserRoutes","Routes","GRANT","AddTask","ListTask","Setting","DashBoard","Popup","open","onClose","englishTitle","suggestedTargetTitle","languageCode","_React$useState","_React$useState2","targetTitle","setTargetTitle","data","targetURL","buttonName","Dialog","DialogTitle","DialogContent","gutterBottom","style","textDecoration","TextField","multiline","mt","DialogActions","mr","autoFocus","COLUMNS","hideable","minWidth","TabledArticles","_React$useState3","_React$useState4","popupAction","setPopupAction","_React$useState5","_React$useState6","popupOpen","setPopupOpen","_React$useState7","_React$useState8","popupEnglishTitle","setPopupEnglishTitle","_React$useState9","_React$useState10","popupSuggestedTargetTitle","setPopupSuggestedTargetTitle","executeAction","currentTarget","dataset","src","useMemo","article","index","wikidata","_Fragment","TranslateIcon","WikiTextArticles","_ref3","select","_ref4","_React$useState11","_React$useState12","setData","_React$useState13","_React$useState14","wikitext","setWikiText","_React$useState15","_React$useState16","showWikiText","setShowWikiText","_React$useState17","_React$useState18","setCSV","_React$useState19","_React$useState20","setJSON","_React$useState21","_React$useState22","statusCheckerTimer","setStatusCheckerTimer","_React$useState23","_React$useState24","_React$useState25","_React$useState26","processedCategory","setProcessedCategory","_React$useState27","_React$useState28","processedCount","setProcessedCount","_React$useState29","_React$useState30","generating","setGenerating","checkTaskStatus","task","getTask","exportTable","alert","setTimeout","last_category","category_count","exportCSV","_callee2","_csv","_context2","remove","abrupt","exportWikiTextToggle","_callee3","_wikitext","_context3","_callee4","cats","_context4","clearTimeout","Actions","CodeIcon","GeneratorStatus","fontSize","Category","category","onRemove","onSubCategory","ListItem","ListItemText","primary","WaterfallChartIcon","DeleteIcon","AddCategory","onAdd","searching","setSearching","categorySuggestions","setCategorySuggestions","newCat","setNewCat","onInput","searchCategory","_onAdd","find","cat","AutoComplete","options","clearOnBlur","clearOnEscape","getOptionLabel","option","marginRight","marginLeft","renderInput","onSelect","_ref3$disabled","categoryObject","setCategoryObject","values","ccatID","catID","console","log","addSubCategories","forEach","reduce","dict","elevation","List","dense","Divider"],"sourceRoot":""}