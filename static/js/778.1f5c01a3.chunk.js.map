{"version":3,"file":"static/js/778.1f5c01a3.chunk.js","mappings":"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","sources":["TukTukBot/Pages/Settings.jsx","TukTukBot/Pages/Tasks/AddTask.jsx","TukTukBot/Pages/Tasks/ListTask.jsx","TukTukBot/Server.ts","TukTukBot/TukTukBot.jsx","TukTukBot/components/Articles.jsx","TukTukBot/components/Category.jsx"],"sourcesContent":["import SelectInput from \"@mui/material/Select/SelectInput\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport PowerSettingsNewIcon from '@mui/icons-material/PowerSettingsNew';\nimport HideIcon from '@mui/icons-material/VisibilityOff';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Server from \"../Server.ts\";\nconst Settings = () => {\n    const hideUsername = (e) => {\n        const message = `\n        Are you want to hide your username from all the records?\n        This action is irreversible and it would:\n        - Hide your username from all the records\n        - Keep your central ID intact\n        - log you out from now. You need to login again to continue\n        `\n        if (window.confirm(message))\n            Server.updateMe({ username: \"Hidden\" }).then(user => {\n                fetch('/user/logout', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({})\n                }).then(res => {\n                    window.location.href = '/user/login'\n                })\n        })\n    }\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n\n            <Button variant=\"contained\" color=\"error\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                onClick={hideUsername}\n            >\n                <HideIcon /> &nbsp; Hide my username\n            </Button>\n\n\n        </Paper>\n    )\n}\nexport default Settings","import CategoryList from \"../../components/Category\";\nimport ListIcon from '@mui/icons-material/List';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport Server from \"../../Server\";\n\nfunction AddTask() {\n    const categoryListRef = React.useRef([]);\n    const [countries, setCountries] = useState([]);\n    const [taskID, setTaskID] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [topicName, setTopicName] = useState('folklore');\n    const [country, setCountry] = useState('BD');\n    const [targetwiki, setTargetwiki] = useState('');\n    const [categoryExpanded, setCategoryExpanded] = useState(true);\n    const [categoryFetching, setCategoryFetching] = useState(false);\n    const [targetWikiError, setTargetWikiError] = useState(false);\n    const [defaultCategories, setDefaultCategories] = useState([]);\n    const [resultElement, setResultElement] = useState(null);\n    const statusRef = React.useRef(false);\n    const wiki = []\n    for (const [key, value] of Object.entries(Server.languages)) {\n        wiki.push({ id: key, label: value })\n    }\n    wiki.sort((a, b) => a.label.localeCompare(b.label));\n    useEffect(() => {\n        Server.fetchCountries(topicName).then(countries => {\n            setCountries([...countries]);\n        })\n    }, [topicName])\n    useEffect(() => {\n        if (!country)\n            return;\n        if (!topicName)\n            return;\n        setDisabled(true);\n        setCategoryFetching(true);\n        Server.getCategories({ country: country, topic: topicName })\n            .then(categories => {\n                setDisabled(false);\n                setDefaultCategories(categories)\n            }).finally(e => {\n                // console.log(e)\n                setDisabled(false);\n                setCategoryFetching(false);\n            })\n    }, [country, topicName]);\n    const submitTask = useCallback(() => {\n        // submit task logic\n        const categoryList = categoryListRef?.current;\n        if (!categoryList?.length)\n            return;\n        if(!targetwiki){\n            setTargetWikiError(true);\n            return;\n        } else {\n            setTargetWikiError(false);\n        }\n        if ( !country || !categoryList || !topicName)\n            return;\n        setDisabled(true);\n        setResultElement(null);\n        Server.submitTask({\n            target_wiki: targetwiki,\n            country: country,\n            categories: categoryList,\n            topic_id: topicName,\n            task_data: categoryList\n        }).then(response => {\n            const taskID = response?.id;\n            setTaskID(taskID);\n            // console.log(response)\n            setDisabled(false);\n            setCategoryExpanded(false);\n            setResultElement(<ArticleList\n                Server={Server}\n                taskID={taskID}\n                statusRef={statusRef}\n                setDisabled={setDisabled}\n                targetWiki={targetwiki}\n            />)\n        })\n    }, [targetwiki]);\n    return (\n        <Card>\n            <CardHeader title=\"Add Task\" action={\n                <Button variant=\"contained\" color=\"success\" onClick={submitTask} disabled={disabled} size=\"small\">\n                    <ListIcon /> Generate\n                </Button>\n            } />\n            <CardContent>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'left',\n                    flexDirection: 'row',\n                    // borderSpacing: 1\n                }}>\n                    <FormControl sx={{ width: 300 }} size=\"small\">\n                        <InputLabel>Country</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            value={country}\n                            label=\"Country\"\n                            onChange={e => e.target.value && setCountry(e.target.value)}\n                        >\n                            {countries.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ width: 300, ml: 0.5 }} size=\"small\">\n                        <InputLabel>Target Wiki</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            error={targetWikiError}\n                            value={targetwiki}\n                            label=\"Target Wiki\"\n                            onChange={e => e.target.value && setTargetwiki(e.target.value)}\n                        >\n                            {wiki.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant=\"contained\"\n                        disabled={disabled}\n                        // color=\"secondary\"\n                        onClick={e => setCategoryExpanded(!categoryExpanded)}\n                        size=\"small\"\n                        sx={{\n                            padding : 1\n                        }}\n                        >\n                        {categoryExpanded ? <CollapseIcon /> : <ExpandedIcon />}\n                    </Button>\n                </Box>\n\n                <Collapse in={categoryExpanded}>\n                    {categoryFetching ? <CircularProgress /> : (\n                        <CategoryList\n                            disabled={disabled}\n                            categoryListRef={categoryListRef}\n                            Server={Server}\n                            initialCategories={defaultCategories}\n                        />\n                    )}\n                </Collapse>\n                {resultElement}\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default AddTask","\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CardActions, CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nimport GREEN from \"@mui/material/colors/green\";\nimport RED from \"@mui/material/colors/red\";\nimport Yellow from \"@mui/material/colors/yellow\";\nimport Server from \"../../Server\"\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@mui/icons-material/Add';\nconst countryMAP = await Server.getCountryMap()\nconst User = () => {\n    const [username, setUsername] = useState(null);\n    const [id, setID] = useState(0)\n    const [taskCount, setTaskCount] = useState(0)\n    const [articleCount, setArticleCount] = useState(0)\n    const [fetching, setFetching] = useState(false)\n    useEffect(() => {\n        setFetching(true)\n        Server.getMe().then(user => {\n            setUsername(user.username)\n            setTaskCount(user.task_count)\n            setID(user.id)\n            setArticleCount(user.article_count)\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return fetching ? <CircularProgress /> : (\n        <Box>\n            <h2>Welcome, {username}</h2>\n            <h3>Task Count : {taskCount}</h3>\n            <h3>Total Article Count : {articleCount}</h3>\n        </Box>\n    )\n}\n\nconst DownloadButon = ({ id }) => {\n    const download = async () => {\n        const csv = await Server.exportResult(id, 'csv')\n        const a = document.createElement('a')\n        a.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }))\n        a.download = 'result.csv'\n        a.click()\n    }\n    return <Button variant=\"contained\" color=\"primary\" onClick={download}>\n        <DownloadIcon />\n    </Button>\n}\nconst headers = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1 },\n    { field: 'status', headerName: 'Status',maxWidth: 100, flex : 1 },\n    { field: 'topic_id', headerName: 'Topic',  flex : 1 },\n    { field: 'country', headerName: 'Country',  flex : 1 },\n    { field: 'category_count', headerName: 'Category', maxWidth: 100, flex : 1 },\n    {field : 'article_count', headerName : 'Article', maxWidth : 100, flex : 1},\n    // { field: 'created_at', headerName: 'Timestamp', flex : 1},\n    { field: 'download', headerName: 'Download', renderCell : (params) => params.value},\n]\nconst TaskList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const formatter = new Intl.DateTimeFormat('en-US', {\n        dateStyle: 'medium',\n        timeStyle: 'medium'\n    });\n    useEffect(() => {\n        setFetching(true)\n        Server.getTasks().then(tasks => {\n            setTasks(tasks.map(v => ({\n                ...v,\n                country : countryMAP[v.country] || v.country,\n                created_at : formatter.format(new Date(v.created_at)),\n                download : v.status == 'done' && <DownloadButon id={v.id} />\n            })))\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return <DataGrid\n        rows={tasks}\n        columns={headers}\n        pageSize={5}\n        sx={{\n            '& .MuiDataGrid-row' : {\n                cursor : 'pointer',\n                color : 'white',\n            },\n            '& .Mui-hovered' : {\n                color : 'black'\n            },\n            '& .Mui-selected' : {\n                color : 'black'\n            },\n            '& .task-done' : {\n                backgroundColor : GREEN[800],\n                color : 'white',\n            },\n            '& .task-done:hover' : {\n                backgroundColor : GREEN[600],\n                color : 'white',\n            },\n            '& .task-pending' : {\n                backgroundColor : Yellow[300],\n                color : 'black'\n            },\n            '& .task-failed' : {\n                backgroundColor : RED[300],\n            },\n        }}\n        rowsPerPageOptions={[5]}\n        checkboxSelection={false}\n        disableSelectionOnClick={true}\n        rowSelection={false}\n        getRowClassName={(params) => `task-${params.row.status} .task`}\n        loading={fetching}\n    />\n\n}\nconst ListTask = () => {\n    const NewTaskButton = () => (\n        <Link to=\"create\">\n           <Button variant=\"contained\" color=\"success\"><AddIcon /> New</Button>\n        </Link>\n    )\n    return (\n        <Card>\n            \n            <CardHeader action={<NewTaskButton />}/>\n            <CardContent>\n            <User />\n                <TaskList />\n            </CardContent>\n        </Card>\n    )\n}\nexport default ListTask","\ntype Country = string\ntype ID = number\ntype Article = {\n    id : ID;\n    title : string;\n    wikidata : string;\n    target : string\n}\ntype Category = {\n    id : ID;\n    title : string;\n    subcat?: boolean\n}\n\ntype APIResponseSingle<T> = {\n    success : true;\n    data : T;\n    detail? : string;\n}\ntype APIResponseMultiple<T> = {\n    success : true;\n    data : T[];\n    detail? : string;\n}\ntype User = {\n    id : number;\n    username : string;\n    rights : number;\n    created_at : string;\n    article_count : number;\n    category_count : number;\n    task_count : number;\n}\ntype TaskCreate = {\n    home_wiki : string;\n    target_wiki : string;\n    country : Country;\n    topic_id : string;\n    categories : Category[],\n    topic_data : Category[] \n}\ntype Task = {\n    id: number,\n    status: string,\n    homewiki: string,\n    categories: Array<string>,\n    user: string,\n    country: string,\n    article_count: number\n    category_count : number\n    category_done : number\n    last_category : string\n}\ntype TaskResultFormat = \"json\" | \"wikitext\" | \"csv\"\ntype TaskResult = string | Article[]\ntype CountryEntry = {\n    id : string;\n    label : string;\n    title : string;\n}\ntype TopicCreate = {\n    title : string;\n    country : Country;\n    categories : Category[];\n}\n\ntype Topic = {\n    id : string;\n    title : string;\n    country : Country;\n    categories? : Category[];\n}\nconst LANGUAGE_KEY = \"tk-lang\"\nconst COUNTRY_KEY = \"tk-country\"\nclass TukTukBot {\n    static baseURL = new URL(window.location.origin);\n    static languages : Object | null = null;\n    static countries : Object | null= null;\n    static async init(){\n        if(!TukTukBot.languages || !TukTukBot.countries){\n            if(!localStorage.getItem(LANGUAGE_KEY) || !localStorage.getItem(COUNTRY_KEY)){\n                localStorage.setItem(COUNTRY_KEY, JSON.stringify(await fetch(\"/api/country\").then(res => res.json()).then(res => res.data)))\n                localStorage.setItem(LANGUAGE_KEY, JSON.stringify(await fetch(\"/api/language\").then(res => res.json()).then(res => res.data)))\n            }\n            TukTukBot.languages = JSON.parse(localStorage.getItem(LANGUAGE_KEY) || \"{}\");\n            TukTukBot.countries = JSON.parse(localStorage.getItem(COUNTRY_KEY) || \"{}\");\n        }\n        \n    }\n    static async addSubCategories(categories: Category[]) {\n        var subcats : Category[] = []\n        for (let cat of categories) {\n            console.info(\"Adding subcategories for\", cat.title)\n            const url = new URL(\"api/subcat/\" + cat.title, TukTukBot.baseURL);\n            const response = await fetch(url.toString());\n            const data: APIResponseMultiple<Category> = await response.json();\n            subcats = subcats.concat(data.data);\n            cat.subcat = false;\n        }\n        return subcats;\n    }\n    static async getCategories({country, topic} : {country : Country, topic : string}){\n        const url = new URL(`api/topic/${topic.split(\"/\")[0]}/${country}/categories`, TukTukBot.baseURL);\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<Category> = await response.json();\n        if (responseData.success) {\n            return responseData.data\n        } else {\n            console.log(\"Error\", responseData.data)\n            return [] as Category[];\n        }\n    }\n    static async submitTask(data : TaskCreate) {\n        // Submit the task\n        const url = new URL(\"api/task\", TukTukBot.baseURL);\n        const response = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify(data),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        });\n        const responseData: APIResponseSingle<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n\n    }\n    static async fetchCountries(topic : string){\n        const url = new URL(\"api/topic/\" + topic + \"/country\", TukTukBot.baseURL);\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<CountryEntry> = await response.json();\n        if (responseData.success) {\n            const rawData = responseData.data;\n            const countries = rawData.map((country) => {\n                return {\n                    id : country.id.split(\"/\")[1],\n                    label : country.title\n                }\n            })\n            return countries\n        } else {\n            console.log(\"Error\", responseData.data)\n            return [] as Country[];\n        }\n    }\n    static async exportResult(taskID : Number, format: TaskResultFormat = \"json\") {\n        const url = new URL(`api/task/${taskID}/export/` + format, TukTukBot.baseURL);\n        const response = await fetch(url.toString());\n        const data : APIResponseSingle<TaskResult> = await response.json();\n        return data.data;\n    }\n    static async getTask(taskID: number) {\n        const url = new URL(\"api/task/\" + taskID, TukTukBot.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseSingle<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getTasks() {\n        const url = new URL(\"api/task\", TukTukBot.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseMultiple<Task> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getMe(){\n        const url = new URL(\"api/user/me\", TukTukBot.baseURL);\n        // console.log(taskID)\n        const response = await fetch(url.toString());\n        const responseData: APIResponseSingle<User> = await response.json();\n        if (responseData.success) {\n            return responseData.data;\n        } else {\n            console.log(\"Error\", responseData.data)\n            return null\n        }\n    }\n    static async getCountryMap(){\n        const url = new URL(\"api/country\", TukTukBot.baseURL);\n        const countries = await fetch(url).then(res => res.json())\n        return countries.data\n    }\n    static searchCategory(callback : (data : Category[]) => void, setSearching : (searching : boolean) => void){\n        let q = \"\";\n        let queued = false;\n        const interval = 1000;\n        async function _search() {\n            \n            if(q == \"\") return callback([]);\n            const url = new URL(\"https://en.wikipedia.org/w/api.php\");\n            const params = new URLSearchParams({\n                \"action\": \"query\",\n                \"format\": \"json\",\n                \"list\": \"prefixsearch\",\n                \"formatversion\": \"2\",\n                \"pssearch\": q,\n                \"pslimit\": \"10\",\n                \"psnamespace\": \"14\",\n                \"origin\": \"*\"\n            })\n            url.search = params.toString();\n            const response = await fetch(url.toString());\n            const data = await response.json();\n            const categories = data.query.prefixsearch.map((cat : any) => {\n                return {\n                    id : cat.pageid,\n                    title : cat.title\n                }\n            })\n            queued = false;\n            setSearching(false);\n            return callback(categories);\n        }\n        return function(e : KeyboardEvent){\n            setSearching(true)\n            q = (e?.target as HTMLInputElement)?.value;\n            if(queued == false){\n                // Nothing is queued\n                queued = true;\n                setTimeout(_search, interval)\n            } else {\n                // Something is already queued\n                console.log(\"Already queued\")\n            }\n        }\n\n    }\n    static async createTopic(topic : TopicCreate){\n        const url = new URL(\"api/topic\", TukTukBot.baseURL);\n        const response : APIResponseSingle<Topic> = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify(topic),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json());\n        console.log(response)\n        return response.data;\n    }\n    static async getTopic(topicID : string){\n        const url = new URL(\"api/topic/\" + topicID, TukTukBot.baseURL);\n        const response : APIResponseSingle<Topic> = await fetch(url.toString()).then(res => res.json());\n        return response.data;\n    }\n    static async updateTopic({id, categories} : Topic){\n        const url = new URL(\"api/topic/\" + id, TukTukBot.baseURL);\n        const response : APIResponseSingle<Topic> = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify({categories}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json());\n        return response.data;\n    }\n    static async updateMe({username, rights} : User){\n        const url = new URL(\"api/user/me\", TukTukBot.baseURL);\n        const response : APIResponseSingle<User> = await fetch(url.toString(), {\n            method: \"POST\",\n            body: JSON.stringify({username, rights}),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        }).then(res => res.json());\n        return response.data;\n    }\n}\nexport default TukTukBot;\n","import { Routes, Route } from \"react-router-dom\"\nimport React, {lazy} from \"react\"\nimport AddTask from \"./Pages/Tasks/AddTask.jsx\";\nimport ListTask from \"./Pages/Tasks/ListTask.jsx\"\nimport Setting from \"./Pages/Settings.jsx\";\n\nimport Server from \"./Server.ts\"\nconst AddTopic = lazy(() => import('./Pages/Topics/CreateTopic.jsx'))\nconst EditTopic = lazy(() => import('./Pages/Topics/EditTopic.jsx'))\nconst ListTopic = lazy(() => import('./Pages/Topics/ListTopics.jsx'))\nServer.init()\nconst TukTukBot = () => {\n    const isPrevilleged = true\n    const DashBoard = isPrevilleged ? ListTopic : ListTask\n    const PrevillegedRoutes = (\n        <Route path='/topic/*'>\n            <Route path=\"create\" element={<AddTopic />} />\n            <Route path=\"edit\" element={<EditTopic />} />\n            <Route path=\"*\" element={<ListTopic />} />\n        </Route>\n    )\n    return (\n        <Routes>\n            {isPrevilleged && PrevillegedRoutes}\n            <Route path=\"task/*\" >\n                <Route path=\"create\" element={<AddTask />} />\n                {/* <Route path=\":id\" element={<Setting />} /> */}\n                <Route path=\"*\" element={<ListTask />} />\n            </Route>\n            <Route path=\"/setting\" element={<Setting />} />\n            <Route path=\"*\" element={<DashBoard />} />\n        </Routes>\n    )\n}\n\nexport default TukTukBot","import Paper from \"@mui/material/Paper\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React, { useCallback } from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CodeIcon from '@mui/icons-material/Code';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Collapse from \"@mui/material/Collapse\"\nimport Server from \"../Server.ts\";\n\n\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nconst COLUMNS = [\n    { field: 'id', headerName: 'ID', maxWidth : 30, flex:1, hideable : false },\n    { field: 'title', headerName: 'Title' , flex: 1, hideable : false },\n    // { field: 'wikidata', headerName: 'Wikidata', width : 120},\n    { field: 'target', headerName: 'Target', flex : 1},\n\n]\nconst TabledArticles = ({ data }) => {\n    const rows = data?.map((article, index) => ({\n        id: index + 1,\n        title: article?.title,\n        wikidata : article?.wikidata,\n        target : article?.target\n    }));\n    return (\n        <DataGrid\n            rows={rows}\n            columns={COLUMNS}\n            pageSize={5}\n            rowsPerPageOptions={[5]}\n            checkboxSelection={false}\n            disableSelectionOnClick\n            sx={{\n                width: '100%',\n            }}\n        />\n    )\n}\n\nconst WikiTextArticles = ({ data }) => {\n    return (\n        <TextField\n            id=\"outlined-multiline-static\"\n            label={null}\n            multiline\n            rows={4}\n            value={data}\n            fullWidth\n            onClick={e => e.target.select()}\n        />\n    )\n}\nclass ArticleList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n\n            wikitext: '',\n            showWikiText: false,\n            fetchingWikiText: false,\n\n            csv: null,\n            fetchingCSV: false,\n\n            json: null,\n            fetchingJSON: false,\n\n            statusCheckerTimer: 0,\n\n            articleCount: 0,\n            processedCategory: 'Cat:L',\n            processedCount: 100\n        };\n    }\n    async checkTaskStatus() {\n        console.log(\"Checking status\")\n        const task = await Server.getTask(this.props.taskID)\n        console.log(\"Task Status\", task)\n        if (task.status != 'pending') {\n            console.log(\"Timer Cleared\", this.state.statusCheckerTimer)\n            this.setState({\n                generating: false,\n                statusCheckerTimer: 0\n            })\n            if (task.status == 'done') {\n                this.exportTable();\n            } else {\n\n            }\n        } else {\n            this.setState({\n                generating: true,\n                statusCheckerTimer: setTimeout(this.checkTaskStatus.bind(this), 1000)\n\n            })\n        }\n        this.setState({\n            articleCount: task.article_count,\n            processedCategory: task.last_category,\n            processedCount: task.category_count\n        })\n    }\n    componentWillUnmount() {\n        clearTimeout(this.state.statusCheckerTimer);\n        this.setState({\n            // statusCheckerTimer : 0\n        })\n\n    }\n    async exportCSV() {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!this.state.csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(this.props.taskID, 'csv');\n            this.setState({\n                csv: csv\n            })\n            return download(this.props.taskID, csv)\n        };\n        return download(this.props.taskID, this.state.csv)\n\n    }\n    async exportWikiTextToggle() {\n        if (this.state.showWikiText)\n            // hide the wikitext\n            this.setState({\n                showWikiText: false\n            })\n        else {\n            if (!this.state.wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(this.props.taskID, 'wikitext');\n                this.setState({\n                    showWikiText: true,\n                    wikitext: wikitext\n                })\n            }\n            else\n                this.setState({\n                    showWikiText: true\n                })\n        }\n    }\n    async exportTable() {\n        const cats = await Server.exportResult(this.props.taskID, 'json');\n        this.setState({\n            data: cats,\n            json: JSON.stringify(cats)\n        })\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log(\"Should Component Update\", nextProps, nextState)\n        if (this.props.taskID != nextProps.taskID) {\n            this.checkTaskStatus();\n            // reset the state\n            this.setState({\n                data: [],\n\n                wikitext: '',\n                showWikiText: false,\n                fetchingWikiText: false,\n\n                csv: null,\n                fetchingCSV: false,\n\n                json: null,\n                fetchingJSON: false,\n\n                statusCheckerTimer: 0,\n\n                articleCount: 0,\n                processedCategory: '',\n                processedCount: 0\n            })\n        }\n        return true;\n    }\n    render() {\n        const processing = this.state.fetchingCSV || this.state.fetchingJSON || this.state.fetchingWikiText;\n        const Actions = (\n            <Box sx={{\n                display: 'flex',\n                justifyContent: 'flex-end',\n                alignItems: 'center',\n                '& > *': {\n                    m: 1,\n                },\n            }}>\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={this.exportWikiTextToggle.bind(this)}>\n                    <CodeIcon /> WikiText\n                </Button>\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={this.exportCSV.bind(this)}>\n                    <DownloadIcon /> CSV\n                </Button>\n            </Box>\n        );\n        const GeneratorStatus = (\n            <Box>\n                Article count : {this.state.articleCount}\n                Processed Count : {this.state.processedCount}\n                Last Category: {this.state.processedCategory}\n            </Box>\n        )\n        return <Card sx={\n            { m: '5px' }\n        }>\n            <CardHeader action={Actions} title={GeneratorStatus} />\n            <CardContent>\n                {processing ? <CircularProgress /> : (\n                    <>\n                        <Collapse in={this.state.showWikiText}>\n                            <WikiTextArticles data={this.state.wikitext} />\n                        </Collapse>\n                        {this.state.data?.length > 0 && <TabledArticles data={this.state.data} />}\n                    </>\n                )}\n            </CardContent>\n        </Card>\n    }\n}\nconst _ArticleList = ({ taskID, statusRef, setDisabled }) => {\n    const [data, setData] = React.useState([]);\n    const [wikitext, setWikiText] = React.useState('');\n    const [showWikiText, setShowWikiText] = React.useState(false);\n    const [csv, setCSV] = React.useState(null);\n    const [json, setJSON] = React.useState(null);\n    const [statusCheckerTimer, setStatusCheckerTimer] = React.useState(0);\n    const [articleCount, setArticleCount] = React.useState(0);\n    const [processedCategory, setProcessedCategory] = React.useState('');\n    const [processedCount, setProcessedCount] = React.useState(0);\n    const [generating, setGenerating] = React.useState(false);\n    statusRef.current = generating\n    const checkTaskStatus = useCallback(async () => {\n        // console.log(\"Checking status\")\n        const task = await Server.getTask(taskID)\n        if (task.status != 'pending') {\n            // console.log(\"Timer Cleared\", statusCheckerTimer)\n            setGenerating(false);\n            setDisabled(false);\n            setStatusCheckerTimer(0)\n            if (task.status == 'done') {\n                exportTable();\n            } else if(task.status == 'failed'){\n                alert(\"Task Failed\")\n            }\n        } else {\n            setGenerating(true);\n            setDisabled(true);\n            setStatusCheckerTimer(setTimeout(checkTaskStatus, 1000))\n        }\n        setArticleCount(task.article_count);\n        setProcessedCategory(task.last_category);\n        setProcessedCount(task.category_count);\n    }, [taskID]);\n    const exportCSV = useCallback(async () => {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(taskID, 'csv');\n            setCSV(csv)\n            return download(taskID, csv)\n        };\n        return download(taskID, csv)\n\n    }, [taskID,]);\n    const exportWikiTextToggle = useCallback(async () => {\n        if (showWikiText)\n            // hide the wikitext\n            setShowWikiText(false)\n        else {\n            if (!wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(taskID, 'wikitext');\n                setShowWikiText(true)\n                setWikiText(wikitext)\n            }\n            else\n                setShowWikiText(true)\n        }\n    }, [taskID, showWikiText]);\n    const exportTable = useCallback(async () => {\n        const cats = await Server.exportResult(taskID, 'json');\n        setData(cats);\n        setJSON(JSON.stringify(cats));\n    }, [taskID]);\n    \n    React.useEffect(() => {\n        checkTaskStatus();\n        return () => {\n            clearTimeout(statusCheckerTimer);\n            setStatusCheckerTimer(0)\n        }\n    }, [taskID, checkTaskStatus]);\n    const Actions = (\n        <Box sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n            '& > *': {\n                m: 1,\n            },\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportWikiTextToggle} disabled={generating} size=\"small\">\n                <CodeIcon /> WikiText\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportCSV} disabled={generating} size=\"small\">\n                <DownloadIcon /> CSV\n            </Button>\n        </Box>\n    );\n    const GeneratorStatus = (\n        <Box sx={{\n            fontSize: '16px'\n        }}>\n            Article count : {articleCount}<br/>\n            Processed Count : {processedCount}<br/>\n            Last Category: {processedCategory}<br/>\n        </Box>\n    )\n    return <Card sx={\n        { m: '5px' }\n    }>\n        <CardHeader action={Actions} title={GeneratorStatus} />\n        <CardContent>\n            {generating ? <CircularProgress /> : (\n                <>\n                    <Collapse in={showWikiText}>\n                        <WikiTextArticles data={wikitext} />\n                    </Collapse>\n                    {data?.length > 0 && <TabledArticles data={data} />}\n                </>\n            )}\n        </CardContent>\n    </Card>\n}\nexport default _ArticleList","import Paper from \"@mui/material/Paper\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport Server from \"../Server.ts\";\nconst Category = ({ category, onRemove, onSubCategory }) => {\n    return (\n        <ListItem>\n            <ListItemText sx={{\n                padding: '5px'\n            }} primary={category?.title} />\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onSubCategory(category?.id)}>\n                <WaterfallChartIcon />\n            </Button>\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onRemove(category?.id)}>\n                <DeleteIcon />\n            </Button>\n        </ListItem>\n    )\n}\nconst AddCategory = ({ onAdd, disabled }) => {\n    const [searching, setSearching] = React.useState(false);\n    const [categorySuggestions, setCategorySuggestions] = React.useState([]); // [{title: 'cat1'}, {title: 'cat2'}\n    const [newCat, setNewCat] = React.useState('');\n    const onInput = React.useCallback(Server.searchCategory(setCategorySuggestions, setSearching), []);\n    const _onAdd = React.useCallback((e) => {\n        const category = categorySuggestions.find(cat => cat.title === newCat);\n        if (!category)\n            return;\n        onAdd(category);\n        setNewCat('');\n    }, [categorySuggestions, newCat]);\n    return (\n        <Box sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            // justifyContent: 'center',\n            width: '100%',\n            height: '100%',\n\n        }}>\n            <AutoComplete\n                id=\"new-category\"\n                options={categorySuggestions}\n                disabled={disabled}\n                size=\"small\"\n                clearOnBlur\n                clearOnEscape\n                loading={searching}\n                getOptionLabel={(option) => option?.title || ''}\n                sx={{\n                    width: '100%',\n                    maxWidth: '400px',\n                    marginRight: '10px',\n                    marginLeft: '10px'\n                }}\n                renderInput={(params) => <TextField\n                    {...params} disabled={disabled}\n                    onInput={onInput}\n                    onSelect={e => setNewCat(e.target.value)}\n                    label=\"Add Category\"\n                />}\n            />\n            <Button disabled={disabled} variant=\"contained\" color=\"success\" onClick={_onAdd} >\n                <AddIcon />\n            </Button>\n        </Box>\n    )\n}\nconst CategoryList = ({ categoryListRef, initialCategories, disabled = false }) => {\n    const [categoryObject, setCategoryObject] = React.useState({});// {categoryName: {categoryObject}\n    const categories = React.useMemo(() => {\n        return Object.values(categoryObject);\n    }, [categoryObject]);\n    const onRemove = React.useCallback((ccatID) => {\n        if (!ccatID)\n            return\n        if (!categoryObject[ccatID])\n            return\n        delete categoryObject[ccatID];\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onAdd = React.useCallback((category) => {\n        if (!category)\n            return\n        if (categoryObject[category.id])\n            return\n        categoryObject[category.id] = category;\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onSubCategory = React.useCallback((catID) => {\n        console.log('onSubCategory', catID)\n        const cat = categoryObject[catID];\n        if (!cat)\n            return\n        Server.addSubCategories([cat]).then(categories => {\n            categories.forEach(cat => {\n                categoryObject[cat.id] = cat;\n            });\n            setCategoryObject({ ...categoryObject });\n        });\n    }, [categoryObject]);\n    // Populate the categories\n    React.useEffect(() => {\n        if (categoryListRef)\n            categoryListRef.current = categories;\n    }, [categories, categoryListRef]);\n    React.useEffect(() => {\n        if (!initialCategories?.length)\n            return;\n        setCategoryObject(initialCategories?.reduce((dict, v) => { dict[v.id] = v; return dict }, {}))\n    }, [initialCategories]);\n    return (\n        <Paper elevation={0}>\n            <List dense={true}>\n                {categories?.map((category, index) => (\n                    <React.Fragment key={\"cat\" + index}>\n                        <Category category={category} onRemove={onRemove} onSubCategory={onSubCategory} />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List><br />\n            {/* // show button and the input in the same box */}\n            <AddCategory onAdd={onAdd} disabled={disabled} />\n        </Paper>\n    )\n}\nexport default CategoryList"],"names":["_jsx","Paper","sx","height","width","m","border","outline","position","children","_jsxs","Button","variant","color","size","padding","onClick","e","window","confirm","Server","updateMe","username","then","user","fetch","method","headers","body","JSON","stringify","res","location","href","HideIcon","categoryListRef","React","_useState","useState","_useState2","_slicedToArray","countries","setCountries","_useState3","_useState4","setTaskID","_useState5","_useState6","disabled","setDisabled","_useState7","_useState8","topicName","_useState9","_useState10","country","setCountry","_useState11","_useState12","targetwiki","setTargetwiki","_useState13","_useState14","categoryExpanded","setCategoryExpanded","_useState15","_useState16","categoryFetching","setCategoryFetching","_useState17","_useState18","targetWikiError","setTargetWikiError","_useState19","_useState20","defaultCategories","setDefaultCategories","_useState21","_useState22","resultElement","setResultElement","statusRef","wiki","_i","_Object$entries","Object","entries","languages","length","_Object$entries$_i","key","value","push","id","label","sort","a","b","localeCompare","useEffect","fetchCountries","_toConsumableArray","getCategories","topic","categories","finally","submitTask","useCallback","categoryList","current","target_wiki","topic_id","task_data","response","taskID","ArticleList","targetWiki","Card","CardHeader","title","action","ListIcon","CardContent","Box","display","justifyContent","flexDirection","FormControl","InputLabel","Select","fullWidth","onChange","target","map","v","MenuItem","ml","error","CollapseIcon","ExpandedIcon","Collapse","in","CircularProgress","CategoryList","initialCategories","countryMAP","getCountryMap","User","setUsername","setID","taskCount","setTaskCount","articleCount","setArticleCount","fetching","setFetching","getMe","task_count","article_count","DownloadButon","_ref","download","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","csv","wrap","_context","prev","next","exportResult","sent","document","createElement","URL","createObjectURL","Blob","type","click","stop","apply","arguments","DownloadIcon","field","headerName","maxWidth","flex","renderCell","params","TaskList","tasks","setTasks","formatter","Intl","DateTimeFormat","dateStyle","timeStyle","getTasks","_objectSpread","created_at","format","Date","status","DataGrid","rows","columns","pageSize","cursor","backgroundColor","GREEN","Yellow","RED","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","rowSelection","getRowClassName","concat","row","loading","NewTaskButton","Link","to","AddIcon","LANGUAGE_KEY","COUNTRY_KEY","TukTukBot","_classCallCheck","_createClass","_init","localStorage","getItem","t0","t1","t2","json","data","t3","t4","call","setItem","t5","t6","t7","t8","t9","parse","_addSubCategories","_callee2","subcats","_iterator","_step","cat","url","_data","_context2","_createForOfIteratorHelper","s","n","done","console","info","baseURL","toString","subcat","f","finish","abrupt","_x","_getCategories","_callee3","responseData","_context3","split","success","log","_x2","_submitTask","_callee4","_context4","_x3","_fetchCountries","_callee5","rawData","_context5","_x4","_exportResult","_callee6","_args6","_context6","undefined","_x5","_getTask","_callee7","_context7","_x6","_getTasks","_callee8","_context8","_getMe","_callee9","_context9","_getCountryMap","_callee10","_context10","callback","setSearching","q","queued","_search","_search2","_callee11","_context11","URLSearchParams","search","query","prefixsearch","pageid","_e$target","setTimeout","_createTopic","_callee12","_context12","_x7","_getTopic","_callee13","topicID","_context13","_x8","_updateTopic","_callee14","_context14","_x9","_updateMe","_callee15","_ref3","rights","_context15","_x10","origin","AddTopic","lazy","EditTopic","ListTopic","init","DashBoard","PrevillegedRoutes","Route","path","element","Routes","AddTask","ListTask","Setting","COLUMNS","hideable","TabledArticles","article","index","wikidata","WikiTextArticles","TextField","multiline","select","_React$useState","_React$useState2","setData","_React$useState3","_React$useState4","wikitext","setWikiText","_React$useState5","_React$useState6","showWikiText","setShowWikiText","_React$useState7","_React$useState8","setCSV","_React$useState9","_React$useState10","setJSON","_React$useState11","_React$useState12","statusCheckerTimer","setStatusCheckerTimer","_React$useState13","_React$useState14","_React$useState15","_React$useState16","processedCategory","setProcessedCategory","_React$useState17","_React$useState18","processedCount","setProcessedCount","_React$useState19","_React$useState20","generating","setGenerating","checkTaskStatus","task","getTask","exportTable","alert","last_category","category_count","exportCSV","_csv","remove","exportWikiTextToggle","_wikitext","cats","clearTimeout","Actions","alignItems","CodeIcon","GeneratorStatus","fontSize","_Fragment","Category","category","onRemove","onSubCategory","ListItem","ListItemText","primary","WaterfallChartIcon","DeleteIcon","AddCategory","onAdd","searching","categorySuggestions","setCategorySuggestions","newCat","setNewCat","onInput","searchCategory","_onAdd","find","AutoComplete","options","clearOnBlur","clearOnEscape","getOptionLabel","option","marginRight","marginLeft","renderInput","onSelect","_ref3$disabled","categoryObject","setCategoryObject","values","ccatID","catID","addSubCategories","forEach","reduce","dict","elevation","List","dense","Divider"],"sourceRoot":""}