{"version":3,"file":"static/js/778.06df9c4f.chunk.js","mappings":"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","sources":["TukTukBot/Pages/Settings.jsx","TukTukBot/Pages/Tasks/AddTask.jsx","TukTukBot/Pages/Tasks/ListTask.jsx","TukTukBot/TukTukBot.jsx","TukTukBot/components/Articles.jsx","TukTukBot/components/Category.jsx"],"sourcesContent":["import SelectInput from \"@mui/material/Select/SelectInput\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Paper from \"@mui/material/Paper\";\nimport Button from \"@mui/material/Button\";\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport PowerSettingsNewIcon from '@mui/icons-material/PowerSettingsNew';\nimport HideIcon from '@mui/icons-material/VisibilityOff';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Collapse from \"@mui/material/Collapse\"\nimport Server from \"../Server.ts\";\nimport { useCallback, useState } from \"react\";\nimport Footer from \"../../Layout/Footer.jsx\";\nconst Settings = () => {\n    const [users, setUsers] = useState([])\n    const hideUsername = useCallback((e) => {\n        const message = `\n        Are you want to hide your username from all the records?\n        This action is irreversible and it would:\n        - Hide your username from all the records\n        - Keep your central ID intact\n        - log you out from now. You need to login again to continue\n        `\n        if (window.confirm(message))\n            Server.updateMe({ username: \"Hidden\" }).then(user => {\n                fetch('/user/logout', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({})\n                }).then(res => {\n                    window.location.href = '/user/login'\n                })\n            })\n    }, []);\n    return (\n        <Paper sx={{\n            height: \"100%\",\n            width: \"100%\",\n            m: 0,\n            border: 0,\n            outline: 0,\n            position: 'absolute',\n        }}>\n            {/* <Collapse in={true}>\n                <AutoComplete\n                options={users}\n                sx={{m : 1}}\n                renderInput={props => <TextField {...props} label=\"Username\" />}\n                />\n            </Collapse> */}\n\n            <Button variant=\"contained\" color=\"error\" size=\"small\" sx={{\n                padding: 1,\n                m: 1\n            }}\n                onClick={hideUsername}\n            >\n                <HideIcon /> &nbsp; Hide my username\n            </Button>\n\n            <Footer />\n        </Paper>\n    )\n}\nexport default Settings","import CategoryList from \"../../components/Category\";\nimport ListIcon from '@mui/icons-material/List';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport Server from \"../../Server\";\nimport Footer from \"../../../Layout/Footer\";\n\nfunction AddTask() {\n    const categoryListRef = React.useRef([]);\n    const [countries, setCountries] = useState([]);\n    const [taskID, setTaskID] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [topicName, setTopicName] = useState('folklore');\n    const [country, setCountry] = useState('BD');\n    const [targetwiki, setTargetwiki] = useState('');\n    const [categoryExpanded, setCategoryExpanded] = useState(true);\n    const [categoryFetching, setCategoryFetching] = useState(false);\n    const [targetWikiError, setTargetWikiError] = useState(false);\n    const [defaultCategories, setDefaultCategories] = useState([]);\n    const [resultElement, setResultElement] = useState(null);\n    const statusRef = React.useRef(false);\n    const wiki = []\n    for (const [key, value] of Object.entries(Server.languages)) {\n        wiki.push({ id: key, label: value })\n    }\n    wiki.sort((a, b) => a.label.localeCompare(b.label));\n    useEffect(() => {\n        Server.fetchCountries(topicName).then(countries => {\n            setCountries([...countries]);\n        })\n    }, [topicName])\n    useEffect(() => {\n        if (!country)\n            return;\n        if (!topicName)\n            return;\n        setDisabled(true);\n        setCategoryFetching(true);\n        Server.getCategories({ country: country, topic: topicName })\n            .then(categories => {\n                setDisabled(false);\n                setDefaultCategories(categories)\n            }).finally(e => {\n                // console.log(e)\n                setDisabled(false);\n                setCategoryFetching(false);\n            })\n    }, [country, topicName]);\n    const submitTask = useCallback(() => {\n        // submit task logic\n        const categoryList = categoryListRef?.current;\n        if (!categoryList?.length)\n            return;\n        if(!targetwiki){\n            setTargetWikiError(true);\n            return;\n        } else {\n            setTargetWikiError(false);\n        }\n        if ( !country || !categoryList || !topicName)\n            return;\n        setDisabled(true);\n        setResultElement(null);\n        Server.submitTask({\n            target_wiki: targetwiki,\n            country: country,\n            categories: categoryList,\n            topic_id: topicName,\n            task_data: categoryList\n        }).then(response => {\n            const taskID = response?.id;\n            setTaskID(taskID);\n            // console.log(response)\n            setDisabled(false);\n            setCategoryExpanded(false);\n            setResultElement(<ArticleList\n                Server={Server}\n                taskID={taskID}\n                statusRef={statusRef}\n                setDisabled={setDisabled}\n                targetLanguage={targetwiki}\n            />)\n        })\n    }, [targetwiki]);\n    return (\n        <Card>\n            <CardHeader title=\"Add Task\" action={\n                <Button variant=\"contained\" color=\"success\" onClick={submitTask} disabled={disabled} size=\"small\">\n                    <ListIcon /> Generate\n                </Button>\n            } />\n            <CardContent>\n                <Box sx={{\n                    display: 'flex',\n                    justifyContent: 'left',\n                    flexDirection: 'row',\n                    // borderSpacing: 1\n                }}>\n                    <FormControl sx={{ width: 300 }} size=\"small\">\n                        <InputLabel>Country</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            value={country}\n                            label=\"Country\"\n                            onChange={e => e.target.value && setCountry(e.target.value)}\n                        >\n                            {countries.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ width: 300, ml: 0.5 }} size=\"small\">\n                        <InputLabel>Target Wiki</InputLabel>\n                        <Select\n                            fullWidth\n                            disabled={disabled}\n                            error={targetWikiError}\n                            value={targetwiki}\n                            label=\"Target Wiki\"\n                            onChange={e => e.target.value && setTargetwiki(e.target.value)}\n                        >\n                            {wiki.map(v => <MenuItem key={v.id} value={v.id}>{v.label}</MenuItem>)}\n                        </Select>\n                    </FormControl>\n                    <Button\n                        variant=\"contained\"\n                        disabled={disabled}\n                        // color=\"secondary\"\n                        onClick={e => setCategoryExpanded(!categoryExpanded)}\n                        size=\"small\"\n                        sx={{\n                            padding : 1\n                        }}\n                        >\n                        {categoryExpanded ? <CollapseIcon /> : <ExpandedIcon />}\n                    </Button>\n                </Box>\n\n                <Collapse in={categoryExpanded}>\n                    {categoryFetching ? <CircularProgress /> : (\n                        <CategoryList\n                            disabled={disabled}\n                            categoryListRef={categoryListRef}\n                            Server={Server}\n                            initialCategories={defaultCategories}\n\n                        />\n                    )}\n                </Collapse>\n                {resultElement}\n\n            <Footer />\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default AddTask","\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardHeader from '@mui/material/CardHeader';\nimport React from \"react\";\nimport ArticleList from \"../../components/Articles\";\nimport Box from \"@mui/material/Box\"\nimport Collapse from \"@mui/material/Collapse\"\nimport AutoComplete from \"@mui/material/Autocomplete\"\nimport { useState, useEffect, useCallback } from \"react\";\nimport ExpandedIcon from '@mui/icons-material/ExpandMore';\nimport CollapseIcon from '@mui/icons-material/ExpandLess';\nimport { CardActions, CircularProgress, FormControl, InputLabel, MenuItem, Select, TextField } from \"@mui/material\";\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\nimport GREEN from \"@mui/material/colors/green\";\nimport RED from \"@mui/material/colors/red\";\nimport Yellow from \"@mui/material/colors/yellow\";\nimport Server from \"../../Server\"\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@mui/icons-material/Add';\nimport Footer from '../../../Layout/Footer';\nconst countryMAP = await Server.getCountryMap()\nconst User = () => {\n    const [username, setUsername] = useState(null);\n    const [id, setID] = useState(0)\n    const [taskCount, setTaskCount] = useState(0)\n    const [articleCount, setArticleCount] = useState(0)\n    const [fetching, setFetching] = useState(false)\n    useEffect(() => {\n        setFetching(true)\n        Server.getMe().then(user => {\n            setUsername(user.username)\n            setTaskCount(user.task_count)\n            setID(user.id)\n            setArticleCount(user.article_count)\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return fetching ? <CircularProgress /> : (\n        <Box>\n            <h2>Welcome, {username}</h2>\n            <h3>Task Count : {taskCount}</h3>\n            <h3>Total Article Count : {articleCount}</h3>\n        </Box>\n    )\n}\n\nconst DownloadButon = ({ id }) => {\n    const download = async () => {\n        const csv = await Server.exportResult(id, 'csv')\n        const a = document.createElement('a')\n        a.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv' }))\n        a.download = 'result.csv'\n        a.click()\n    }\n    return <Button variant=\"contained\" color=\"primary\" onClick={download}>\n        <DownloadIcon />\n    </Button>\n}\nconst headers = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1 },\n    { field: 'status', headerName: 'Status',maxWidth: 100, flex : 1 },\n    { field: 'topic_id', headerName: 'Topic',  flex : 1 },\n    { field: 'country', headerName: 'Country',  flex : 1 },\n    { field: 'category_count', headerName: 'Category', maxWidth: 100, flex : 1 },\n    {field : 'article_count', headerName : 'Article', maxWidth : 100, flex : 1},\n    // { field: 'created_at', headerName: 'Timestamp', flex : 1},\n    { field: 'download', headerName: 'Download', renderCell : (params) => params.value},\n]\nconst TaskList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const formatter = new Intl.DateTimeFormat('en-US', {\n        dateStyle: 'medium',\n        timeStyle: 'medium'\n    });\n    useEffect(() => {\n        setFetching(true)\n        Server.getTasks().then(tasks => {\n            setTasks(tasks.map(v => ({\n                ...v,\n                country : countryMAP[v.country] || v.country,\n                created_at : formatter.format(new Date(v.created_at)),\n                download : v.status == 'done' && <DownloadButon id={v.id} />\n            })))\n        }).finally(() => {\n            setFetching(false)\n        })\n    }, [])\n    return <DataGrid\n        rows={tasks}\n        columns={headers}\n        initialState={{\n            pagination: {\n                paginationModel : {\n                    pageSize: 10,\n                }\n            }\n        }}\n        sx={{\n            '& .MuiDataGrid-row' : {\n                cursor : 'pointer',\n                color : 'white',\n            },\n            '& .Mui-hovered' : {\n                color : 'black'\n            },\n            '& .Mui-selected' : {\n                color : 'black'\n            },\n            '& .task-done' : {\n                backgroundColor : GREEN[800],\n                color : 'white',\n            },\n            '& .task-done:hover' : {\n                backgroundColor : GREEN[600],\n                color : 'white',\n            },\n            '& .task-pending' : {\n                backgroundColor : Yellow[300],\n                color : 'black'\n            },\n            '& .task-failed' : {\n                backgroundColor : RED[300],\n            },\n        }}\n        rowsPerPageOptions={[5]}\n        checkboxSelection={false}\n        disableSelectionOnClick={true}\n        rowSelection={false}\n        getRowClassName={(params) => `task-${params.row.status} .task`}\n        loading={fetching}\n    />\n\n}\nconst ListTask = () => {\n    const NewTaskButton = () => (\n        <Link to=\"/tuktukbot/task/create\">\n           <Button variant=\"contained\" color=\"success\"><AddIcon /> New List</Button>\n        </Link>\n    )\n    return (\n        <Card>\n            \n            <CardHeader action={<NewTaskButton />}/>\n            <CardContent>\n            <User />\n                <TaskList />\n                <Footer />\n            </CardContent>\n        </Card>\n    )\n}\nexport default ListTask","import { Routes, Route } from \"react-router-dom\"\nimport React, { lazy } from \"react\"\nimport AddTask from \"./Pages/Tasks/AddTask.jsx\";\nimport ListTask from \"./Pages/Tasks/ListTask.jsx\"\nimport Setting from \"./Pages/Settings.jsx\";\n\nimport Server from \"./Server.ts\"\nconst AddTopic = lazy(() => import('./Pages/Topics/CreateTopic.jsx'))\nconst EditTopic = lazy(() => import('./Pages/Topics/EditTopic.jsx'))\nconst ListTopic = lazy(() => import('./Pages/Topics/ListTopics.jsx'))\n\nconst ListUser = lazy(() => import('./Pages/User/ListUser.jsx'));\nconst EditUser = lazy(() => import('./Pages/User/EditUser.jsx'));\nServer.init()\nconst TukTukBot = ({ user }) => {\n    const DashBoard = (\n        Server.hasAccess(user.rights, Server.RIGHTS.TOPIC) && ListTopic\n        || Server.hasAccess(user.rights, Server.RIGHTS.TASK) && ListTask\n        || Setting\n    )\n    const TopicRoutes = (\n        <Route path='topic/*'>\n            <Route path=\"create\" element={<AddTopic />} />\n            <Route path=\"edit\" element={<EditTopic />} />\n            <Route path=\"*\" element={<ListTopic />} />\n        </Route>\n    )\n    const UserRoutes = (\n        <Route path='user/*'>\n            <Route path=\"edit\" element={<EditUser user={user} />} />\n            <Route path=\"*\" element={<ListUser user={user} />} />\n        </Route>\n    )\n    return (\n        <Routes>\n            {Server.hasAccess(user.rights, Server.RIGHTS.TOPIC) && TopicRoutes}\n            {Server.hasAccess(user.rights, Server.RIGHTS.GRANT) && UserRoutes}\n            <Route path=\"task/*\" >\n                <Route path=\"create\" element={<AddTask />} />\n                <Route path=\"*\" element={<ListTask />} />\n            </Route>\n            <Route path=\"setting\" element={<Setting />} />\n            <Route path=\"*\" element={<DashBoard />} />\n        </Routes>\n    )\n}\n\nexport default TukTukBot","import Paper from \"@mui/material/Paper\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport CodeIcon from '@mui/icons-material/Code';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport Collapse from \"@mui/material/Collapse\"\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport Server from \"../Server.ts\";\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Typography from '@mui/material/Typography';\n\n\n\nimport { DataGrid } from '@mui/x-data-grid/DataGrid';\n\nconst Popup = ({ open, onClose, englishTitle, suggestedTargetTitle, languageCode, action }) => {\n    const [targetTitle, setTargetTitle] = React.useState(suggestedTargetTitle);\n    useEffect(() => {\n        setTargetTitle(suggestedTargetTitle)\n    }, [suggestedTargetTitle])\n    const data = {\n        title: '',\n        targetURL: '',\n        buttonName: ''\n    }\n    if (action == 'translate') {\n        data.title = 'Translate'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=Special:ContentTranslation&campaign=fnf&from=en&page=${englishTitle}&to=${languageCode}&targettitle=${targetTitle}`\n        data.buttonName = 'Translate'\n    } else {\n        data.title = 'Create'\n        data.targetURL = `https://${languageCode}.wikipedia.org/w/index.php?title=${targetTitle}&campaign=fnf&from=en&page=${englishTitle}&to=${targetTitle}&action=edit`\n        data.buttonName = 'Create'\n    }\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <DialogTitle>{data.title}</DialogTitle>\n            <DialogContent>\n                <Typography variant=\"body1\" gutterBottom >\n                    <b>English : <a href={\"https://en.wikipedia.org/wiki/\" + englishTitle} target=\"_blank\" style={{ textDecoration: 'none' }}>{englishTitle}</a></b>\n                </Typography>\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Target Title\"\n                    multiline\n                    value={targetTitle}\n                    fullWidth\n                    onChange={e => setTargetTitle(e.target.value)}\n                    sx={{\n                        mt: 1\n                    }}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button sx={{ mr: 1 }} onClick={() => onClose(null)} color=\"secondary\" variant=\"contained\" size=\"small\">\n                    Cancel\n                </Button>\n                <Button color=\"primary\" variant=\"contained\" component=\"a\" size=\"small\" href={data.targetURL} target=\"_blank\" autoFocus>\n                    {data.buttonName}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\nconst COLUMNS = [\n    { field: 'id', headerName: 'ID', maxWidth: 70, flex: 1, hideable: false },\n    { field: 'action', headerName: 'Action', flex: 1, minWidth: 150, hideable: false, renderCell: (params) => params.value },\n    { field: 'title', headerName: 'Title', flex: 1, hideable: false, minWidth: 300 },\n    // { field: 'wikidata', headerName: 'Wikidata', width : 120},\n    { field: 'target', headerName: 'Target', flex: 1, minWidth: 300 },\n   \n]\nconst TabledArticles = ({ data, targetLanguage, taskID }) => {\n    const [popupAction, setPopupAction] = React.useState(null);\n    const [popupOpen, setPopupOpen] = React.useState(false);\n    const [popupEnglishTitle, setPopupEnglishTitle] = React.useState('');\n    const [popupSuggestedTargetTitle, setPopupSuggestedTargetTitle] = React.useState('');\n    const executeAction = (e) => {\n        setPopupAction(e.currentTarget.dataset.action)\n        setPopupEnglishTitle(e.currentTarget.dataset.src)\n        setPopupSuggestedTargetTitle(e.currentTarget.dataset.target)\n        setPopupOpen(true)\n    }\n    const rows = useMemo(() => data?.map((article, index) => ({\n        id: index + 1,\n        title: article?.title,\n        wikidata: article?.wikidata,\n        target: article?.target,\n        action: (\n            <>\n                <Button variant=\"contained\" color=\"primary\" size=\"small\" data-action=\"create\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <AddIcon />\n                </Button>\n                <Button variant=\"contained\" sx={{ml : 1}} color=\"primary\" size=\"small\" data-action=\"translate\" data-src={article?.title} data-target={article?.target} onClick={executeAction}>\n                    <TranslateIcon />\n                </Button>\n            </>\n        )\n    })), [data, taskID]);\n    return (\n        <>\n            <Popup\n                open={popupOpen}\n                action={popupAction}\n                onClose={() => setPopupOpen(false)}\n                suggestedTargetTitle={popupSuggestedTargetTitle}\n                englishTitle={popupEnglishTitle}\n                languageCode={targetLanguage}\n            />\n            <DataGrid\n                rows={rows}\n                columns={COLUMNS}\n                pageSize={50}\n                rowsPerPageOptions={[50]}\n                checkboxSelection={false}\n                disableSelectionOnClick\n                initialState={{\n                    pagination: {\n                        paginationModel: { pageSize: 25 },\n                    },\n                }}\n                sx={{\n                    width: '100%',\n                }}\n            />\n        </>\n    )\n}\n\nconst WikiTextArticles = ({ data }) => {\n    return (\n        <TextField\n            id=\"outlined-multiline-static\"\n            label={null}\n            multiline\n            rows={4}\n            value={data}\n            fullWidth\n            onClick={e => e.target.select()}\n        />\n    )\n}\nconst ArticleList = ({ taskID, statusRef, setDisabled, targetLanguage }) => {\n    const [data, setData] = React.useState([]);\n    const [wikitext, setWikiText] = React.useState('');\n    const [showWikiText, setShowWikiText] = React.useState(false);\n    const [csv, setCSV] = React.useState(null);\n    const [json, setJSON] = React.useState(null);\n    const [statusCheckerTimer, setStatusCheckerTimer] = React.useState(0);\n    const [articleCount, setArticleCount] = React.useState(0);\n    const [processedCategory, setProcessedCategory] = React.useState('');\n    const [processedCount, setProcessedCount] = React.useState(0);\n    const [generating, setGenerating] = React.useState(false);\n    statusRef.current = generating\n    const checkTaskStatus = useCallback(async () => {\n        // console.log(\"Checking status\")\n        const task = await Server.getTask(taskID)\n        if (task.status != 'pending') {\n            // console.log(\"Timer Cleared\", statusCheckerTimer)\n            setGenerating(false);\n            setDisabled(false);\n            setStatusCheckerTimer(0)\n            if (task.status == 'done') {\n                exportTable();\n            } else if (task.status == 'failed') {\n                alert(\"Task Failed\")\n            }\n        } else {\n            setGenerating(true);\n            setDisabled(true);\n            setStatusCheckerTimer(setTimeout(checkTaskStatus, 1000))\n            setData([]);\n        }\n        setArticleCount(task.article_count);\n        setProcessedCategory(task.last_category);\n        setProcessedCount(task.category_count);\n    }, [taskID]);\n    const exportCSV = useCallback(async () => {\n        const download = (taskID, csv) => {\n            const a = document.createElement(\"a\");\n            a.download = `results-${taskID}.csv`\n            a.href = URL.createObjectURL(new Blob([csv], {\n                type: 'application/csv'\n            }));\n            a.click();\n            a.remove()\n        }\n        if (!csv) {\n            // fetch CSV\n            const csv = await Server.exportResult(taskID, 'csv');\n            setCSV(csv)\n            return download(taskID, csv)\n        };\n        return download(taskID, csv)\n\n    }, [taskID,]);\n    const exportWikiTextToggle = useCallback(async () => {\n        if (showWikiText)\n            // hide the wikitext\n            setShowWikiText(false)\n        else {\n            if (!wikitext) {\n                // fetch the wikitext\n                const wikitext = await Server.exportResult(taskID, 'wikitext');\n                setShowWikiText(true)\n                setWikiText(wikitext)\n            }\n            else\n                setShowWikiText(true)\n        }\n    }, [taskID, showWikiText]);\n    const exportTable = useCallback(async () => {\n        const cats = await Server.exportResult(taskID, 'json');\n        setData(cats);\n        setJSON(JSON.stringify(cats));\n    }, [taskID]);\n\n    React.useEffect(() => {\n        checkTaskStatus();\n        return () => {\n            clearTimeout(statusCheckerTimer);\n            setStatusCheckerTimer(0)\n        }\n    }, [taskID, checkTaskStatus]);\n    const Actions = (\n        <Box sx={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n            '& > *': {\n                m: 1,\n            },\n        }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportWikiTextToggle} disabled={generating} size=\"small\" sx={{mr : 1}}>\n                <CodeIcon /> Wiki\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={exportCSV} disabled={generating} size=\"small\" >\n                <DownloadIcon /> CSV\n            </Button>\n        </Box>\n    );\n    const GeneratorStatus = (\n        <Box sx={{\n            fontSize: '16px'\n        }}>\n            Article count : {articleCount}<br />\n            Processed Count : {processedCount}<br />\n            Last Category: {processedCategory}<br />\n        </Box>\n    )\n    return <Card sx={\n        { m: '5px' }\n    }>\n        <CardHeader action={Actions} title={GeneratorStatus} />\n        <CardContent>\n            {generating ? <CircularProgress /> : (\n                <>\n                    <Collapse in={showWikiText}>\n                        <WikiTextArticles data={wikitext} />\n                    </Collapse>\n                    {data && <TabledArticles data={data} targetLanguage={targetLanguage} taskID={taskID} />}\n                </>\n            )}\n        </CardContent>\n    </Card>\n}\nexport default ArticleList","import Paper from \"@mui/material/Paper\";\nimport LinearProgress from '@mui/material/LinearProgress';\nimport WaterfallChartIcon from '@mui/icons-material/WaterfallChart';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport React from \"react\";\nimport AutoComplete from '@mui/material/Autocomplete';\nimport AddIcon from '@mui/icons-material/Add';\nimport TextField from '@mui/material/TextField';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Divider from '@mui/material/Divider';\nimport Box from '@mui/material/Box';\nimport Server from \"../Server.ts\";\nconst Category = ({ category, onRemove, onSubCategory }) => {\n    return (\n        <ListItem>\n            <ListItemText sx={{\n                padding: '5px'\n            }} primary={category?.title} />\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onSubCategory(category?.id)}>\n                <WaterfallChartIcon />\n            </Button>\n            <Button size=\"small\" variant=\"outlined\" color=\"error\" onClick={e => onRemove(category?.id)}>\n                <DeleteIcon />\n            </Button>\n        </ListItem>\n    )\n}\nconst AddCategory = ({ onAdd, disabled }) => {\n    const [searching, setSearching] = React.useState(false);\n    const [categorySuggestions, setCategorySuggestions] = React.useState([]); // [{title: 'cat1'}, {title: 'cat2'}\n    const [newCat, setNewCat] = React.useState('');\n    const onInput = React.useCallback(Server.searchCategory(setCategorySuggestions, setSearching), []);\n    const _onAdd = React.useCallback((e) => {\n        const category = categorySuggestions.find(cat => cat.title === newCat);\n        if (!category)\n            return;\n        onAdd(category);\n        setNewCat('');\n    }, [categorySuggestions, newCat]);\n    return (\n        <Box sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            // justifyContent: 'center',\n            width: '100%',\n            height: '100%',\n\n        }}>\n            <AutoComplete\n                id=\"new-category\"\n                options={categorySuggestions}\n                disabled={disabled}\n                size=\"small\"\n                clearOnBlur\n                clearOnEscape\n                loading={searching}\n                getOptionLabel={(option) => option?.title || ''}\n                sx={{\n                    width: '100%',\n                    maxWidth: '400px',\n                    marginRight: '10px',\n                    marginLeft: '10px'\n                }}\n                renderInput={(params) => <TextField\n                    {...params} disabled={disabled}\n                    onInput={onInput}\n                    onSelect={e => setNewCat(e.target.value)}\n                    label=\"Add Category\"\n                />}\n            />\n            <Button disabled={disabled} variant=\"contained\" color=\"success\" onClick={_onAdd} >\n                <AddIcon />\n            </Button>\n        </Box>\n    )\n}\nconst CategoryList = ({ categoryListRef, initialCategories, disabled = false }) => {\n    const [categoryObject, setCategoryObject] = React.useState({});// {categoryName: {categoryObject}\n    const categories = React.useMemo(() => {\n        return Object.values(categoryObject);\n    }, [categoryObject]);\n    const onRemove = React.useCallback((ccatID) => {\n        if (!ccatID)\n            return\n        if (!categoryObject[ccatID])\n            return\n        delete categoryObject[ccatID];\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onAdd = React.useCallback((category) => {\n        if (!category)\n            return\n        if (categoryObject[category.id])\n            return\n        categoryObject[category.id] = category;\n        setCategoryObject({ ...categoryObject });\n    }, [categoryObject]);\n    const onSubCategory = React.useCallback((catID) => {\n        console.log('onSubCategory', catID)\n        const cat = categoryObject[catID];\n        if (!cat)\n            return\n        Server.addSubCategories([cat]).then(categories => {\n            categories.forEach(cat => {\n                categoryObject[cat.id] = cat;\n            });\n            setCategoryObject({ ...categoryObject });\n        });\n    }, [categoryObject]);\n    // Populate the categories\n    React.useEffect(() => {\n        if (categoryListRef)\n            categoryListRef.current = categories;\n    }, [categories, categoryListRef]);\n    React.useEffect(() => {\n        if (!initialCategories?.length)\n            return;\n        setCategoryObject(initialCategories?.reduce((dict, v) => { dict[v.id] = v; return dict }, {}))\n    }, [initialCategories]);\n    return (\n        <Paper elevation={0}>\n            <List dense={true}>\n                {categories?.map((category, index) => (\n                    <React.Fragment key={\"cat\" + index}>\n                        <Category category={category} onRemove={onRemove} onSubCategory={onSubCategory} />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List><br />\n            {/* // show button and the input in the same box */}\n            <AddCategory onAdd={onAdd} disabled={disabled} />\n        </Paper>\n    )\n}\nexport default CategoryList"],"names":["_useState","useState","_useState2","_slicedToArray","hideUsername","useCallback","e","window","confirm","Server","updateMe","username","then","user","fetch","method","headers","body","JSON","stringify","res","location","href","_jsxs","Paper","sx","height","width","m","border","outline","position","children","Button","variant","color","size","padding","onClick","_jsx","HideIcon","Footer","categoryListRef","React","countries","setCountries","_useState3","_useState4","setTaskID","_useState5","_useState6","disabled","setDisabled","_useState7","_useState8","topicName","_useState9","_useState10","country","setCountry","_useState11","_useState12","targetwiki","setTargetwiki","_useState13","_useState14","categoryExpanded","setCategoryExpanded","_useState15","_useState16","categoryFetching","setCategoryFetching","_useState17","_useState18","targetWikiError","setTargetWikiError","_useState19","_useState20","defaultCategories","setDefaultCategories","_useState21","_useState22","resultElement","setResultElement","statusRef","wiki","_i","_Object$entries","Object","entries","languages","length","_Object$entries$_i","key","value","push","id","label","sort","a","b","localeCompare","useEffect","fetchCountries","_toConsumableArray","getCategories","topic","categories","finally","submitTask","categoryList","current","target_wiki","topic_id","task_data","response","taskID","ArticleList","targetLanguage","Card","CardHeader","title","action","ListIcon","CardContent","Box","display","justifyContent","flexDirection","FormControl","InputLabel","Select","fullWidth","onChange","target","map","v","MenuItem","ml","error","CollapseIcon","ExpandedIcon","Collapse","in","CircularProgress","CategoryList","initialCategories","countryMAP","getCountryMap","User","setUsername","setID","taskCount","setTaskCount","articleCount","setArticleCount","fetching","setFetching","getMe","task_count","article_count","DownloadButon","_ref","download","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","csv","wrap","_context","prev","next","exportResult","sent","document","createElement","URL","createObjectURL","Blob","type","click","stop","apply","arguments","DownloadIcon","field","headerName","maxWidth","flex","renderCell","params","TaskList","tasks","setTasks","formatter","Intl","DateTimeFormat","dateStyle","timeStyle","getTasks","_objectSpread","created_at","format","Date","status","DataGrid","rows","columns","initialState","pagination","paginationModel","pageSize","cursor","backgroundColor","GREEN","Yellow","RED","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","rowSelection","getRowClassName","concat","row","loading","NewTaskButton","Link","to","AddIcon","AddTopic","lazy","EditTopic","ListTopic","ListUser","EditUser","init","DashBoard","hasAccess","rights","RIGHTS","TOPIC","TASK","ListTask","Setting","TopicRoutes","Route","path","element","UserRoutes","Routes","GRANT","AddTask","Popup","open","onClose","englishTitle","suggestedTargetTitle","languageCode","_React$useState","_React$useState2","targetTitle","setTargetTitle","data","targetURL","buttonName","Dialog","DialogTitle","DialogContent","Typography","gutterBottom","style","textDecoration","TextField","multiline","mt","DialogActions","mr","component","autoFocus","COLUMNS","hideable","minWidth","TabledArticles","_React$useState3","_React$useState4","popupAction","setPopupAction","_React$useState5","_React$useState6","popupOpen","setPopupOpen","_React$useState7","_React$useState8","popupEnglishTitle","setPopupEnglishTitle","_React$useState9","_React$useState10","popupSuggestedTargetTitle","setPopupSuggestedTargetTitle","executeAction","currentTarget","dataset","src","useMemo","article","index","wikidata","_Fragment","TranslateIcon","WikiTextArticles","_ref3","select","_ref4","_React$useState11","_React$useState12","setData","_React$useState13","_React$useState14","wikitext","setWikiText","_React$useState15","_React$useState16","showWikiText","setShowWikiText","_React$useState17","_React$useState18","setCSV","_React$useState19","_React$useState20","setJSON","_React$useState21","_React$useState22","statusCheckerTimer","setStatusCheckerTimer","_React$useState23","_React$useState24","_React$useState25","_React$useState26","processedCategory","setProcessedCategory","_React$useState27","_React$useState28","processedCount","setProcessedCount","_React$useState29","_React$useState30","generating","setGenerating","checkTaskStatus","task","getTask","exportTable","alert","setTimeout","last_category","category_count","exportCSV","_callee2","_csv","_context2","remove","abrupt","exportWikiTextToggle","_callee3","_wikitext","_context3","_callee4","cats","_context4","clearTimeout","Actions","alignItems","CodeIcon","GeneratorStatus","fontSize","Category","category","onRemove","onSubCategory","ListItem","ListItemText","primary","WaterfallChartIcon","DeleteIcon","AddCategory","onAdd","searching","setSearching","categorySuggestions","setCategorySuggestions","newCat","setNewCat","onInput","searchCategory","_onAdd","find","cat","AutoComplete","options","clearOnBlur","clearOnEscape","getOptionLabel","option","marginRight","marginLeft","renderInput","onSelect","_ref3$disabled","categoryObject","setCategoryObject","values","ccatID","catID","console","log","addSubCategories","forEach","reduce","dict","elevation","List","dense","Divider"],"sourceRoot":""}